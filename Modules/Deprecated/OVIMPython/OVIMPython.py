# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _OVIMPython
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class OVBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OVBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OVBase, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _OVIMPython.delete_OVBase
    __del__ = lambda self : None;
    def __init__(self, *args): 
        if self.__class__ == OVBase:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _OVIMPython.new_OVBase(*args)
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _OVIMPython.disown_OVBase(self)
        return weakref_proxy(self)
OVBase_swigregister = _OVIMPython.OVBase_swigregister
OVBase_swigregister(OVBase)

class OVKeyCode(OVBase):
    __swig_setmethods__ = {}
    for _s in [OVBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OVKeyCode, name, value)
    __swig_getmethods__ = {}
    for _s in [OVBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OVKeyCode, name)
    __repr__ = _swig_repr
    def code(*args): return _OVIMPython.OVKeyCode_code(*args)
    def isShift(*args): return _OVIMPython.OVKeyCode_isShift(*args)
    def isCapslock(*args): return _OVIMPython.OVKeyCode_isCapslock(*args)
    def isCtrl(*args): return _OVIMPython.OVKeyCode_isCtrl(*args)
    def isAlt(*args): return _OVIMPython.OVKeyCode_isAlt(*args)
    def isOpt(*args): return _OVIMPython.OVKeyCode_isOpt(*args)
    def isCommand(*args): return _OVIMPython.OVKeyCode_isCommand(*args)
    def isNum(*args): return _OVIMPython.OVKeyCode_isNum(*args)
    def isFunctionKey(*args): return _OVIMPython.OVKeyCode_isFunctionKey(*args)
    def __init__(self, *args): 
        if self.__class__ == OVKeyCode:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _OVIMPython.new_OVKeyCode(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _OVIMPython.delete_OVKeyCode
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _OVIMPython.disown_OVKeyCode(self)
        return weakref_proxy(self)
OVKeyCode_swigregister = _OVIMPython.OVKeyCode_swigregister
OVKeyCode_swigregister(OVKeyCode)

class OVBuffer(OVBase):
    __swig_setmethods__ = {}
    for _s in [OVBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OVBuffer, name, value)
    __swig_getmethods__ = {}
    for _s in [OVBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OVBuffer, name)
    __repr__ = _swig_repr
    def clear(*args): return _OVIMPython.OVBuffer_clear(*args)
    def append(*args): return _OVIMPython.OVBuffer_append(*args)
    def send(*args): return _OVIMPython.OVBuffer_send(*args)
    def update(*args): return _OVIMPython.OVBuffer_update(*args)
    def isEmpty(*args): return _OVIMPython.OVBuffer_isEmpty(*args)
    def __init__(self, *args): 
        if self.__class__ == OVBuffer:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _OVIMPython.new_OVBuffer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _OVIMPython.delete_OVBuffer
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _OVIMPython.disown_OVBuffer(self)
        return weakref_proxy(self)
OVBuffer_swigregister = _OVIMPython.OVBuffer_swigregister
OVBuffer_swigregister(OVBuffer)

class OVCandidate(OVBase):
    __swig_setmethods__ = {}
    for _s in [OVBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OVCandidate, name, value)
    __swig_getmethods__ = {}
    for _s in [OVBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OVCandidate, name)
    __repr__ = _swig_repr
    def clear(*args): return _OVIMPython.OVCandidate_clear(*args)
    def append(*args): return _OVIMPython.OVCandidate_append(*args)
    def hide(*args): return _OVIMPython.OVCandidate_hide(*args)
    def show(*args): return _OVIMPython.OVCandidate_show(*args)
    def update(*args): return _OVIMPython.OVCandidate_update(*args)
    def onScreen(*args): return _OVIMPython.OVCandidate_onScreen(*args)
    def __init__(self, *args): 
        if self.__class__ == OVCandidate:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _OVIMPython.new_OVCandidate(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _OVIMPython.delete_OVCandidate
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _OVIMPython.disown_OVCandidate(self)
        return weakref_proxy(self)
OVCandidate_swigregister = _OVIMPython.OVCandidate_swigregister
OVCandidate_swigregister(OVCandidate)

class OVDictionary(OVBase):
    __swig_setmethods__ = {}
    for _s in [OVBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OVDictionary, name, value)
    __swig_getmethods__ = {}
    for _s in [OVBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OVDictionary, name)
    __repr__ = _swig_repr
    def keyExist(*args): return _OVIMPython.OVDictionary_keyExist(*args)
    def getInteger(*args): return _OVIMPython.OVDictionary_getInteger(*args)
    def setInteger(*args): return _OVIMPython.OVDictionary_setInteger(*args)
    def getString(*args): return _OVIMPython.OVDictionary_getString(*args)
    def setString(*args): return _OVIMPython.OVDictionary_setString(*args)
    def getIntegerWithDefault(*args): return _OVIMPython.OVDictionary_getIntegerWithDefault(*args)
    def getStringWithDefault(*args): return _OVIMPython.OVDictionary_getStringWithDefault(*args)
    def __init__(self, *args): 
        if self.__class__ == OVDictionary:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _OVIMPython.new_OVDictionary(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _OVIMPython.delete_OVDictionary
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _OVIMPython.disown_OVDictionary(self)
        return weakref_proxy(self)
OVDictionary_swigregister = _OVIMPython.OVDictionary_swigregister
OVDictionary_swigregister(OVDictionary)

class OVService(OVBase):
    __swig_setmethods__ = {}
    for _s in [OVBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OVService, name, value)
    __swig_getmethods__ = {}
    for _s in [OVBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OVService, name)
    __repr__ = _swig_repr
    def beep(*args): return _OVIMPython.OVService_beep(*args)
    def notify(*args): return _OVIMPython.OVService_notify(*args)
    def locale(*args): return _OVIMPython.OVService_locale(*args)
    def userSpacePath(*args): return _OVIMPython.OVService_userSpacePath(*args)
    def pathSeparator(*args): return _OVIMPython.OVService_pathSeparator(*args)
    def toUTF8(*args): return _OVIMPython.OVService_toUTF8(*args)
    def fromUTF8(*args): return _OVIMPython.OVService_fromUTF8(*args)
    def UTF16ToUTF8(*args): return _OVIMPython.OVService_UTF16ToUTF8(*args)
    def UTF8ToUTF16(*args): return _OVIMPython.OVService_UTF8ToUTF16(*args)
    def __init__(self, *args): 
        if self.__class__ == OVService:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _OVIMPython.new_OVService(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _OVIMPython.delete_OVService
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _OVIMPython.disown_OVService(self)
        return weakref_proxy(self)
OVService_swigregister = _OVIMPython.OVService_swigregister
OVService_swigregister(OVService)

class OVInputMethodContext(OVBase):
    __swig_setmethods__ = {}
    for _s in [OVBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OVInputMethodContext, name, value)
    __swig_getmethods__ = {}
    for _s in [OVBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OVInputMethodContext, name)
    __repr__ = _swig_repr
    def start(*args): return _OVIMPython.OVInputMethodContext_start(*args)
    def clear(*args): return _OVIMPython.OVInputMethodContext_clear(*args)
    def end(*args): return _OVIMPython.OVInputMethodContext_end(*args)
    def keyEvent(*args): return _OVIMPython.OVInputMethodContext_keyEvent(*args)
    def __init__(self, *args): 
        if self.__class__ == OVInputMethodContext:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _OVIMPython.new_OVInputMethodContext(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _OVIMPython.delete_OVInputMethodContext
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _OVIMPython.disown_OVInputMethodContext(self)
        return weakref_proxy(self)
OVInputMethodContext_swigregister = _OVIMPython.OVInputMethodContext_swigregister
OVInputMethodContext_swigregister(OVInputMethodContext)

class OVModule(OVBase):
    __swig_setmethods__ = {}
    for _s in [OVBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OVModule, name, value)
    __swig_getmethods__ = {}
    for _s in [OVBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OVModule, name)
    __repr__ = _swig_repr
    def moduleType(*args): return _OVIMPython.OVModule_moduleType(*args)
    def identifier(*args): return _OVIMPython.OVModule_identifier(*args)
    def localizedName(*args): return _OVIMPython.OVModule_localizedName(*args)
    def initialize(*args): return _OVIMPython.OVModule_initialize(*args)
    def update(*args): return _OVIMPython.OVModule_update(*args)
    def __init__(self, *args): 
        if self.__class__ == OVModule:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _OVIMPython.new_OVModule(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _OVIMPython.delete_OVModule
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _OVIMPython.disown_OVModule(self)
        return weakref_proxy(self)
OVModule_swigregister = _OVIMPython.OVModule_swigregister
OVModule_swigregister(OVModule)

class OVInputMethod(OVModule):
    __swig_setmethods__ = {}
    for _s in [OVModule]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OVInputMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [OVModule]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OVInputMethod, name)
    __repr__ = _swig_repr
    def newContext(*args): return _OVIMPython.OVInputMethod_newContext(*args)
    def moduleType(*args): return _OVIMPython.OVInputMethod_moduleType(*args)
    def __init__(self, *args): 
        if self.__class__ == OVInputMethod:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _OVIMPython.new_OVInputMethod(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _OVIMPython.delete_OVInputMethod
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _OVIMPython.disown_OVInputMethod(self)
        return weakref_proxy(self)
OVInputMethod_swigregister = _OVIMPython.OVInputMethod_swigregister
OVInputMethod_swigregister(OVInputMethod)

class OVOutputFilter(OVModule):
    __swig_setmethods__ = {}
    for _s in [OVModule]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OVOutputFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [OVModule]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OVOutputFilter, name)
    __repr__ = _swig_repr
    def process(*args): return _OVIMPython.OVOutputFilter_process(*args)
    def moduleType(*args): return _OVIMPython.OVOutputFilter_moduleType(*args)
    def __init__(self, *args): 
        if self.__class__ == OVOutputFilter:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _OVIMPython.new_OVOutputFilter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _OVIMPython.delete_OVOutputFilter
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _OVIMPython.disown_OVOutputFilter(self)
        return weakref_proxy(self)
OVOutputFilter_swigregister = _OVIMPython.OVOutputFilter_swigregister
OVOutputFilter_swigregister(OVOutputFilter)

ovkEsc = _OVIMPython.ovkEsc
ovkSpace = _OVIMPython.ovkSpace
ovkReturn = _OVIMPython.ovkReturn
ovkDelete = _OVIMPython.ovkDelete
ovkBackspace = _OVIMPython.ovkBackspace
ovkUp = _OVIMPython.ovkUp
ovkDown = _OVIMPython.ovkDown
ovkLeft = _OVIMPython.ovkLeft
ovkRight = _OVIMPython.ovkRight
ovkHome = _OVIMPython.ovkHome
ovkEnd = _OVIMPython.ovkEnd
ovkPageUp = _OVIMPython.ovkPageUp
ovkPageDown = _OVIMPython.ovkPageDown
ovkTab = _OVIMPython.ovkTab


