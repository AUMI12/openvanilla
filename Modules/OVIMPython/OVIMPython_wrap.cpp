/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.20
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_DIRECTORS

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};                                                    
#endif


#include "Python.h"

/*************************************************************** -*- c -*-
 * python/precommon.swg
 *
 * Rename all exported symbols from common.swg, to avoid symbol
 * clashes if multiple interpreters are included
 *
 ************************************************************************/

#define SWIG_TypeRegister    SWIG_Python_TypeRegister
#define SWIG_TypeCheck       SWIG_Python_TypeCheck
#define SWIG_TypeCast        SWIG_Python_TypeCast
#define SWIG_TypeDynamicCast SWIG_Python_TypeDynamicCast
#define SWIG_TypeName        SWIG_Python_TypeName
#define SWIG_TypeQuery       SWIG_Python_TypeQuery
#define SWIG_TypeClientData  SWIG_Python_TypeClientData
#define SWIG_PackData        SWIG_Python_PackData 
#define SWIG_UnpackData      SWIG_Python_UnpackData 


/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  if defined(_MSC_VER) || defined(__GNUC__)
#    if defined(STATIC_LINKED)
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) extern a
#    else
#      define SWIGEXPORT(a) __declspec(dllexport) a
#      define SWIGIMPORT(a) extern a
#    endif
#  else
#    if defined(__BORLANDC__)
#      define SWIGEXPORT(a) a _export
#      define SWIGIMPORT(a) a _export
#    else
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) a
#    endif
#  endif
#else
#  define SWIGEXPORT(a) a
#  define SWIGIMPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#  define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#  define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGIMPORT(void *)           SWIG_TypeCast(swig_type_info *, void *);
SWIGIMPORT(swig_type_info *) SWIG_TypeDynamicCast(swig_type_info *, void **);
SWIGIMPORT(const char *)     SWIG_TypeName(const swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeQuery(const char *);
SWIGIMPORT(void)             SWIG_TypeClientData(swig_type_info *, void *);
SWIGIMPORT(char *)           SWIG_PackData(char *, void *, int);
SWIGIMPORT(char *)           SWIG_UnpackData(char *, void *, int);

#else

static swig_type_info *swig_type_list = 0;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti) {
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = swig_type_list;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      if (tc->clientdata) ti->clientdata = tc->clientdata;
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = swig_type_list;
  swig_type_list = ti;

  /* Build linked lists */
  l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty) {
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
        s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) {
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/* Return the name associated with this type */
SWIGRUNTIME(const char *)
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/* Search for a swig_type_info structure */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = swig_type_list;
  while (ty) {
    if (ty->str && (strcmp(name,ty->str) == 0)) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
SWIGRUNTIME(void)
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata == clientdata) return;
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = swig_type_list;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0))
          SWIG_TypeClientData(tc,clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* Pack binary data into a string */
SWIGRUNTIME(char *)
SWIG_PackData(char *c, void *ptr, int sz) {
  static char hex[17] = "0123456789abcdef";
  int i;
  unsigned char *u = (unsigned char *) ptr;
  register unsigned char uu;
  for (i = 0; i < sz; i++,u++) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* Unpack binary data from a string */
SWIGRUNTIME(char *)
SWIG_UnpackData(char *c, void *ptr, int sz) {
  register unsigned char uu = 0;
  register int d;
  unsigned char *u = (unsigned char *) ptr;
  int i;
  for (i = 0; i < sz; i++, u++) {
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    *u = uu;
  }
  return c;
}

#endif

#ifdef __cplusplus
}
#endif

/***********************************************************************
 * python.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

#include "Python.h"

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Flags for pointer conversion */

#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

/* Exception handling in wrappers */
#define SWIG_fail   goto fail

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags) \
  SWIG_Python_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags) \
  SWIG_Python_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags) \
  SWIG_Python_MustGetPtr(p, type, argnum, flags)

/* Python-specific SWIG API */
#define SWIG_newvarlink() \
  SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr) \
  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags) \
  SWIG_Python_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type) \
  SWIG_Python_NewPackedObj(ptr, sz, type)
#define SWIG_InstallConstants(d, constants) \
  SWIG_Python_InstallConstants(d, constants)

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(int)               SWIG_Python_ConvertPtr(PyObject *, void **, swig_type_info *, int);
SWIGIMPORT(PyObject *)        SWIG_Python_NewPointerObj(void *, swig_type_info *,int own);
SWIGIMPORT(void *)            SWIG_Python_MustGetPtr(PyObject *, swig_type_info *, int, int);
SWIGIMPORT(PyObject *)        SWIG_Python_newvarlink(void);
SWIGIMPORT(void)              SWIG_Python_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
SWIGIMPORT(int)               SWIG_Python_ConvertPacked(PyObject *, void *, int sz, swig_type_info *, int);
SWIGIMPORT(PyObject *)        SWIG_Python_NewPackedObj(void *, int sz, swig_type_info *);
SWIGIMPORT(void)              SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]);

#else

/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */

typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

static PyObject *
swig_varlink_repr(swig_varlinkobject *v) {
  v = v;
  return PyString_FromString("<Global variables>");
}

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
  swig_globalvar  *var;
  flags = flags;
  fprintf(fp,"Global variables { ");
  for (var = v->vars; var; var=var->next) {
    fprintf(fp,"%s", var->name);
    if (var->next) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->get_attr)();
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return NULL;
}

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->set_attr)(p);
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return 1;
}

statichere PyTypeObject varlinktype = {
  PyObject_HEAD_INIT(0)              
  0,
  (char *)"swigvarlink",              /* Type name    */
  sizeof(swig_varlinkobject),         /* Basic size   */
  0,                                  /* Itemsize     */
  0,                                  /* Deallocator  */ 
  (printfunc) swig_varlink_print,     /* Print        */
  (getattrfunc) swig_varlink_getattr, /* get attr     */
  (setattrfunc) swig_varlink_setattr, /* Set attr     */
  0,                                  /* tp_compare   */
  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_mapping*/
  0,                                  /* tp_hash      */
};

/* Create a variable linking object for use later */
SWIGRUNTIME(PyObject *)
SWIG_Python_newvarlink(void) {
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  result->vars = 0;
  result->ob_refcnt = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGRUNTIME(void)
SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v;
  swig_globalvar *gv;
  v= (swig_varlinkobject *) p;
  gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  gv->name = (char *) malloc(strlen(name)+1);
  strcpy(gv->name,name);
  gv->get_attr = get_attr;
  gv->set_attr = set_attr;
  gv->next = v->vars;
  v->vars = gv;
}

/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_Python_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c = 0;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;

  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }
#ifdef SWIG_COBJECT_TYPES
  if (!(PyCObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyCObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  *ptr = PyCObject_AsVoidPtr(obj);
  c = (char *) PyCObject_GetDesc(obj);
  if (newref) Py_DECREF(obj);
  goto cobject;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) {
      if (newref) { Py_DECREF(obj); }
      return 0;
    } else {
      if (newref) { Py_DECREF(obj); }
      goto type_error;
    }
  }
  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (newref) { Py_DECREF(obj); }
#endif

#ifdef SWIG_COBJECT_TYPES
cobject:
#endif

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,(void*) *ptr);
  }

  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
    PyObject *zero = PyInt_FromLong(0);
    PyObject_SetAttrString(pyobj,(char*)"thisown",zero);
    Py_DECREF(zero);
  }
  return 0;

type_error:
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty && c) {
      char *temp = (char *) malloc(64+strlen(ty->name)+strlen(c));
      sprintf(temp,"Type error. Got %s, expected %s", c, ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME(void *)
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  SWIG_Python_ConvertPtr(obj, &result, ty, flags | SWIG_POINTER_EXCEPTION);
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME(int)
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c = 0;

  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:

  if (flags) {
    if (ty && c) {
      char *temp = (char *) malloc(64+strlen(ty->name)+strlen(c));
      sprintf(temp,"Type error. Got %s, expected %s", c, ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Create a new pointer object */
SWIGRUNTIME(PyObject *)
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PyCObject_FromVoidPtrAndDesc((void *) ptr, (char *) type->name, NULL);
#else
  {
    char result[1024];
    char *r = result;
    *(r++) = '_';
    r = SWIG_PackData(r,&ptr,sizeof(void *));
    strcpy(r,type->name);
    robj = PyString_FromString(result);
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
        PyObject *n = PyInt_FromLong(1);
        PyObject_SetAttrString(inst,(char*)"thisown",n);
        Py_DECREF(n);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME(PyObject *)
SWIG_Python_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return PyString_FromString(result);
}

/* Install Constants */
SWIGRUNTIME(void)
SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
  int i;
  PyObject *obj;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_PY_INT:
      obj = PyInt_FromLong(constants[i].lvalue);
      break;
    case SWIG_PY_FLOAT:
      obj = PyFloat_FromDouble(constants[i].dvalue);
      break;
    case SWIG_PY_STRING:
      obj = PyString_FromString((char *) constants[i].pvalue);
      break;
    case SWIG_PY_POINTER:
      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
      break;
    case SWIG_PY_BINARY:
      obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
      break;
    default:
      obj = 0;
      break;
    }
    if (obj) {
      PyDict_SetItemString(d,constants[i].name,obj);
      Py_DECREF(obj);
    }
  }
}

#endif

/* Contract support */

#define SWIG_contract_assert(expr, msg) if (!(expr)) { PyErr_SetString(PyExc_RuntimeError, (char *) msg ); goto fail; } else

#ifdef __cplusplus
}
#endif


/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_OVModule swig_types[0] 
#define  SWIGTYPE_p_OVCandidate swig_types[1] 
#define  SWIGTYPE_p_OVDictionary swig_types[2] 
#define  SWIGTYPE_p_OVBuffer swig_types[3] 
#define  SWIGTYPE_p_OVOutputFilter swig_types[4] 
#define  SWIGTYPE_p_OVKeyCode swig_types[5] 
#define  SWIGTYPE_p_OVService swig_types[6] 
#define  SWIGTYPE_p_OVInputMethod swig_types[7] 
#define  SWIGTYPE_p_OVInputMethodContext swig_types[8] 
#define  SWIGTYPE_p_OVBase swig_types[9] 
#define  SWIGTYPE_p_p_unsigned_short swig_types[10] 
#define  SWIGTYPE_p_unsigned_short swig_types[11] 
static swig_type_info *swig_types[13];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _OVIMPython.so
  ------------------------------------------------*/
#define SWIG_init    init_OVIMPython

#define SWIG_name    "_OVIMPython"

#include "../../Framework/Headers/OpenVanilla.h"

/***********************************************************************
 * director.swg
 *
 *     This file contains support for director classes that proxy
 *     method calls from C++ to Python extensions.
 *
 * Author : Mark Rose (mrose@stm.lbl.gov)
 ************************************************************************/

#ifdef __cplusplus

#include <string>

namespace Swig {
  /* base class for director exceptions */
  class DirectorException {
    protected:
      std::string swig_msg;
    public:
      DirectorException(const char* msg="") {
      }
      const char *getMessage() const { 
        return swig_msg.c_str(); 
      }
      virtual ~DirectorException() {}
  };

  /* type mismatch in the return value from a python method call */
  class DirectorTypeMismatchException : public Swig::DirectorException {
    public:
      DirectorTypeMismatchException(const char* msg="") {
        swig_msg = "Swig director type mismatch: ";
        swig_msg += msg;
        PyErr_SetString(PyExc_TypeError, msg);
      }
  };

  /* any python exception that occurs during a director method call */
  class DirectorMethodException : public Swig::DirectorException {};

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public Swig::DirectorException {};


  /* simple thread abstraction for pthreads on win32 */
#ifdef __THREAD__
#define __PTHREAD__
#if defined(_WIN32) || defined(__WIN32__)
#define pthread_mutex_lock EnterCriticalSection
#define pthread_mutex_unlock LeaveCriticalSection
#define pthread_mutex_t CRITICAL_SECTION
#define MUTEX_INIT(var) CRITICAL_SECTION var
#else
#include <pthread.h>
#define MUTEX_INIT(var) pthread_mutex_t var = PTHREAD_MUTEX_INITIALIZER 
#endif
#endif


  /* director base class */
  class Director {
    private:
      /* pointer to the wrapped python object */
      PyObject* swig_self;
      /* flag indicating whether the object is owned by python or c++ */
      mutable bool swig_disown_flag;
      /* shared flag for breaking recursive director calls */
      static bool swig_up;

#ifdef __PTHREAD__
      /* locks for sharing the swig_up flag in a threaded environment */
      static pthread_mutex_t swig_mutex_up;
      static bool swig_mutex_active;
      static pthread_t swig_mutex_thread;
#endif

      /* decrement the reference count of the wrapped python object */
      void swig_decref() const { 
        if (swig_disown_flag) {
          Py_DECREF(swig_self); 
        }
      }

      /* reset the swig_up flag once the routing direction has been determined */
#ifdef __PTHREAD__
      void swig_clear_up() const { 
        Swig::Director::swig_up = false; 
        Swig::Director::swig_mutex_active = false;
        pthread_mutex_unlock(&swig_mutex_up);
      }
#else
      void swig_clear_up() const { 
        Swig::Director::swig_up = false; 
      }
#endif

    public:
      /* wrap a python object, optionally taking ownership */
      Director(PyObject* self, bool disown) : swig_self(self), swig_disown_flag(disown) {
        swig_incref();
      }

      /* discard our reference at destruction */
      virtual ~Director() {
        swig_decref(); 
      }

      /* return a pointer to the wrapped python object */
      PyObject *swig_get_self() const { 
        return swig_self; 
      }

      /* get the swig_up flag to determine if the method call should be routed
       * to the c++ base class or through the wrapped python object
       */
#ifdef __PTHREAD__
      bool swig_get_up() const { 
        if (Swig::Director::swig_mutex_active) {
          if (pthread_equal(Swig::Director::swig_mutex_thread, pthread_self())) {
            bool up = swig_up;
            swig_clear_up();
            return up;
          }
        }
        return 0;
      }
#else 
      bool swig_get_up() const { 
        bool up = swig_up;
        swig_up = false;
        return up;
      }
#endif

      /* set the swig_up flag if the next method call should be directed to
       * the c++ base class rather than the wrapped python object
       */
#ifdef __PTHREAD__
      void swig_set_up() const { 
        pthread_mutex_lock(&Swig::Director::swig_mutex_up);
        Swig::Director::swig_mutex_thread = pthread_self();
        Swig::Director::swig_mutex_active = true;
        Swig::Director::swig_up = true; 
      }
#else 
      void swig_set_up() const { 
        Swig::Director::swig_up = true; 
      }
#endif

      /* acquire ownership of the wrapped python object (the sense of "disown"
       * is from python) */
      void swig_disown() const { 
        if (!swig_disown_flag) { 
          swig_disown_flag=true;
          swig_incref(); 
        } 
      }

      /* increase the reference count of the wrapped python object */
      void swig_incref() const { 
        if (swig_disown_flag) {
          Py_INCREF(swig_self); 
        }
      }

      /* methods to implement pseudo protected director members */
      virtual bool swig_get_inner(const char* name) const {
        return true;
      }

      virtual void swig_set_inner(const char* name, bool val) const {
      }
  };

  bool Swig::Director::swig_up = false;

#ifdef __PTHREAD__
  MUTEX_INIT(Swig::Director::swig_mutex_up);
  pthread_t Swig::Director::swig_mutex_thread;
  bool Swig::Director::swig_mutex_active = false;
#endif

}

#endif /* __cplusplus */




/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "OVIMPython_wrap.h"

SwigDirector_OVKeyCode::SwigDirector_OVKeyCode(PyObject* self, bool disown) : Swig::Director(self, disown) {
    
}



int SwigDirector_OVKeyCode::isCapslock() {
    int c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "isCapslock", NULL);
    c_result = (int) PyInt_AsLong(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyInt_AsLong");
    Py_XDECREF(result);
    return c_result;
}


int SwigDirector_OVKeyCode::isFunctionKey() {
    int c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        return OVKeyCode::isFunctionKey();
    }
    result = PyObject_CallMethod(swig_get_self(), "isFunctionKey", NULL);
    c_result = (int) PyInt_AsLong(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyInt_AsLong");
    Py_XDECREF(result);
    return c_result;
}


int SwigDirector_OVKeyCode::isCommand() {
    int c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        return OVKeyCode::isCommand();
    }
    result = PyObject_CallMethod(swig_get_self(), "isCommand", NULL);
    c_result = (int) PyInt_AsLong(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyInt_AsLong");
    Py_XDECREF(result);
    return c_result;
}


int SwigDirector_OVKeyCode::code() {
    int c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "code", NULL);
    c_result = (int) PyInt_AsLong(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyInt_AsLong");
    Py_XDECREF(result);
    return c_result;
}


int SwigDirector_OVKeyCode::isCtrl() {
    int c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "isCtrl", NULL);
    c_result = (int) PyInt_AsLong(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyInt_AsLong");
    Py_XDECREF(result);
    return c_result;
}


int SwigDirector_OVKeyCode::isNum() {
    int c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "isNum", NULL);
    c_result = (int) PyInt_AsLong(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyInt_AsLong");
    Py_XDECREF(result);
    return c_result;
}


int SwigDirector_OVKeyCode::isShift() {
    int c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "isShift", NULL);
    c_result = (int) PyInt_AsLong(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyInt_AsLong");
    Py_XDECREF(result);
    return c_result;
}


int SwigDirector_OVKeyCode::isAlt() {
    int c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "isAlt", NULL);
    c_result = (int) PyInt_AsLong(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyInt_AsLong");
    Py_XDECREF(result);
    return c_result;
}


int SwigDirector_OVKeyCode::isOpt() {
    int c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        return OVKeyCode::isOpt();
    }
    result = PyObject_CallMethod(swig_get_self(), "isOpt", NULL);
    c_result = (int) PyInt_AsLong(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyInt_AsLong");
    Py_XDECREF(result);
    return c_result;
}


SwigDirector_OVBuffer::SwigDirector_OVBuffer(PyObject* self, bool disown) : Swig::Director(self, disown) {
    
}



OVBuffer *SwigDirector_OVBuffer::append(char const *s) {
    OVBuffer *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "append", "s" ,s);
    if ((SWIG_ConvertPtr(result,(void **) &c_result, SWIGTYPE_p_OVBuffer,SWIG_POINTER_EXCEPTION | 0 )) == -1) throw Swig::DirectorTypeMismatchException("Pointer conversion failed.");
    Py_XDECREF(result);
    return c_result;
}


int SwigDirector_OVBuffer::isEmpty() {
    int c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "isEmpty", NULL);
    c_result = (int) PyInt_AsLong(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyInt_AsLong");
    Py_XDECREF(result);
    return c_result;
}


OVBuffer *SwigDirector_OVBuffer::clear() {
    OVBuffer *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "clear", NULL);
    if ((SWIG_ConvertPtr(result,(void **) &c_result, SWIGTYPE_p_OVBuffer,SWIG_POINTER_EXCEPTION | 0 )) == -1) throw Swig::DirectorTypeMismatchException("Pointer conversion failed.");
    Py_XDECREF(result);
    return c_result;
}


OVBuffer *SwigDirector_OVBuffer::send() {
    OVBuffer *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "send", NULL);
    if ((SWIG_ConvertPtr(result,(void **) &c_result, SWIGTYPE_p_OVBuffer,SWIG_POINTER_EXCEPTION | 0 )) == -1) throw Swig::DirectorTypeMismatchException("Pointer conversion failed.");
    Py_XDECREF(result);
    return c_result;
}


OVBuffer *SwigDirector_OVBuffer::update() {
    OVBuffer *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "update", NULL);
    if ((SWIG_ConvertPtr(result,(void **) &c_result, SWIGTYPE_p_OVBuffer,SWIG_POINTER_EXCEPTION | 0 )) == -1) throw Swig::DirectorTypeMismatchException("Pointer conversion failed.");
    Py_XDECREF(result);
    return c_result;
}


OVBuffer *SwigDirector_OVBuffer::update(int cursorPos, int markFrom, int markTo) {
    OVBuffer *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "update", "iii" ,cursorPos,markFrom,markTo);
    if ((SWIG_ConvertPtr(result,(void **) &c_result, SWIGTYPE_p_OVBuffer,SWIG_POINTER_EXCEPTION | 0 )) == -1) throw Swig::DirectorTypeMismatchException("Pointer conversion failed.");
    Py_XDECREF(result);
    return c_result;
}


SwigDirector_OVCandidate::SwigDirector_OVCandidate(PyObject* self, bool disown) : Swig::Director(self, disown) {
    
}



OVCandidate *SwigDirector_OVCandidate::append(char const *s) {
    OVCandidate *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "append", "s" ,s);
    if ((SWIG_ConvertPtr(result,(void **) &c_result, SWIGTYPE_p_OVCandidate,SWIG_POINTER_EXCEPTION | 0 )) == -1) throw Swig::DirectorTypeMismatchException("Pointer conversion failed.");
    Py_XDECREF(result);
    return c_result;
}


OVCandidate *SwigDirector_OVCandidate::clear() {
    OVCandidate *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "clear", NULL);
    if ((SWIG_ConvertPtr(result,(void **) &c_result, SWIGTYPE_p_OVCandidate,SWIG_POINTER_EXCEPTION | 0 )) == -1) throw Swig::DirectorTypeMismatchException("Pointer conversion failed.");
    Py_XDECREF(result);
    return c_result;
}


OVCandidate *SwigDirector_OVCandidate::hide() {
    OVCandidate *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "hide", NULL);
    if ((SWIG_ConvertPtr(result,(void **) &c_result, SWIGTYPE_p_OVCandidate,SWIG_POINTER_EXCEPTION | 0 )) == -1) throw Swig::DirectorTypeMismatchException("Pointer conversion failed.");
    Py_XDECREF(result);
    return c_result;
}


OVCandidate *SwigDirector_OVCandidate::show() {
    OVCandidate *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "show", NULL);
    if ((SWIG_ConvertPtr(result,(void **) &c_result, SWIGTYPE_p_OVCandidate,SWIG_POINTER_EXCEPTION | 0 )) == -1) throw Swig::DirectorTypeMismatchException("Pointer conversion failed.");
    Py_XDECREF(result);
    return c_result;
}


OVCandidate *SwigDirector_OVCandidate::update() {
    OVCandidate *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "update", NULL);
    if ((SWIG_ConvertPtr(result,(void **) &c_result, SWIGTYPE_p_OVCandidate,SWIG_POINTER_EXCEPTION | 0 )) == -1) throw Swig::DirectorTypeMismatchException("Pointer conversion failed.");
    Py_XDECREF(result);
    return c_result;
}


int SwigDirector_OVCandidate::onScreen() {
    int c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "onScreen", NULL);
    c_result = (int) PyInt_AsLong(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyInt_AsLong");
    Py_XDECREF(result);
    return c_result;
}


SwigDirector_OVDictionary::SwigDirector_OVDictionary(PyObject* self, bool disown) : Swig::Director(self, disown) {
    
}



char const *SwigDirector_OVDictionary::getString(char const *key) {
    char *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "getString", "s" ,key);
    c_result = (char *) PyString_AsString(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyString_AsString");
    Py_XDECREF(result);
    return c_result;
}


char const *SwigDirector_OVDictionary::setString(char const *key, char const *value) {
    char *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "setString", "ss" ,key,value);
    c_result = (char *) PyString_AsString(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyString_AsString");
    Py_XDECREF(result);
    return c_result;
}


int SwigDirector_OVDictionary::setInteger(char const *key, int value) {
    int c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "setInteger", "si" ,key,value);
    c_result = (int) PyInt_AsLong(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyInt_AsLong");
    Py_XDECREF(result);
    return c_result;
}


int SwigDirector_OVDictionary::getIntegerWithDefault(char const *key, int value) {
    int c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        return OVDictionary::getIntegerWithDefault(key,value);
    }
    result = PyObject_CallMethod(swig_get_self(), "getIntegerWithDefault", "si" ,key,value);
    c_result = (int) PyInt_AsLong(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyInt_AsLong");
    Py_XDECREF(result);
    return c_result;
}


char const *SwigDirector_OVDictionary::getStringWithDefault(char const *key, char const *value) {
    char *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        return OVDictionary::getStringWithDefault(key,value);
    }
    result = PyObject_CallMethod(swig_get_self(), "getStringWithDefault", "ss" ,key,value);
    c_result = (char *) PyString_AsString(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyString_AsString");
    Py_XDECREF(result);
    return c_result;
}


int SwigDirector_OVDictionary::keyExist(char const *key) {
    int c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "keyExist", "s" ,key);
    c_result = (int) PyInt_AsLong(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyInt_AsLong");
    Py_XDECREF(result);
    return c_result;
}


int SwigDirector_OVDictionary::getInteger(char const *key) {
    int c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "getInteger", "s" ,key);
    c_result = (int) PyInt_AsLong(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyInt_AsLong");
    Py_XDECREF(result);
    return c_result;
}


SwigDirector_OVService::SwigDirector_OVService(PyObject* self, bool disown) : Swig::Director(self, disown) {
    
}



char const *SwigDirector_OVService::userSpacePath(char const *modid) {
    char *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "userSpacePath", "s" ,modid);
    c_result = (char *) PyString_AsString(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyString_AsString");
    Py_XDECREF(result);
    return c_result;
}


char const *SwigDirector_OVService::toUTF8(char const *encoding, char const *src) {
    char *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "toUTF8", "ss" ,encoding,src);
    c_result = (char *) PyString_AsString(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyString_AsString");
    Py_XDECREF(result);
    return c_result;
}


char const *SwigDirector_OVService::fromUTF8(char const *encoding, char const *src) {
    char *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "fromUTF8", "ss" ,encoding,src);
    c_result = (char *) PyString_AsString(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyString_AsString");
    Py_XDECREF(result);
    return c_result;
}


int SwigDirector_OVService::UTF8ToUTF16(char const *src, unsigned short **rcvr) {
    PyObject * obj0 = 0 ;
    int c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    obj0 = SWIG_NewPointerObj(rcvr, SWIGTYPE_p_p_unsigned_short, 0);
    result = PyObject_CallMethod(swig_get_self(), "UTF8ToUTF16", "sO" ,src,obj0);
    c_result = (int) PyInt_AsLong(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyInt_AsLong");
    Py_XDECREF(result);
    return c_result;
}


char const *SwigDirector_OVService::locale() {
    char *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "locale", NULL);
    c_result = (char *) PyString_AsString(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyString_AsString");
    Py_XDECREF(result);
    return c_result;
}


char const *SwigDirector_OVService::pathSeparator() {
    char *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "pathSeparator", NULL);
    c_result = (char *) PyString_AsString(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyString_AsString");
    Py_XDECREF(result);
    return c_result;
}


void SwigDirector_OVService::beep() {
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "beep", NULL);
    Py_XDECREF(result);
}


void SwigDirector_OVService::notify(char const *msg) {
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "notify", "s" ,msg);
    Py_XDECREF(result);
}


char const *SwigDirector_OVService::UTF16ToUTF8(unsigned short *src, int len) {
    PyObject * obj0 = 0 ;
    char *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    obj0 = SWIG_NewPointerObj(src, SWIGTYPE_p_unsigned_short, 0);
    result = PyObject_CallMethod(swig_get_self(), "UTF16ToUTF8", "Oi" ,obj0,len);
    c_result = (char *) PyString_AsString(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyString_AsString");
    Py_XDECREF(result);
    return c_result;
}


SwigDirector_OVInputMethodContext::SwigDirector_OVInputMethodContext(PyObject* self, bool disown) : Swig::Director(self, disown) {
    
}



void SwigDirector_OVInputMethodContext::clear() {
    PyObject *result;
    
    if (swig_get_up()) {
        OVInputMethodContext::clear();
        return;
    }
    result = PyObject_CallMethod(swig_get_self(), "clear", NULL);
    Py_XDECREF(result);
}


void SwigDirector_OVInputMethodContext::end() {
    PyObject *result;
    
    if (swig_get_up()) {
        OVInputMethodContext::end();
        return;
    }
    result = PyObject_CallMethod(swig_get_self(), "end", NULL);
    Py_XDECREF(result);
}


int SwigDirector_OVInputMethodContext::keyEvent(OVKeyCode *arg0, OVBuffer *arg1, OVCandidate *arg2, OVService *arg3) {
    Swig::Director * director__p_OVKeyCode = 0 ;
    PyObject * obj0 = 0 ;
    Swig::Director * director__p_OVBuffer = 0 ;
    PyObject * obj1 = 0 ;
    Swig::Director * director__p_OVCandidate = 0 ;
    PyObject * obj2 = 0 ;
    Swig::Director * director__p_OVService = 0 ;
    PyObject * obj3 = 0 ;
    int c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    director__p_OVKeyCode = dynamic_cast<Swig::Director *>(arg0);
    if (!director__p_OVKeyCode) {
        obj0 = SWIG_NewPointerObj(arg0, SWIGTYPE_p_OVKeyCode, 0);
    } else {
        obj0 = director__p_OVKeyCode->swig_get_self();
        Py_INCREF(obj0);
    }
    director__p_OVBuffer = dynamic_cast<Swig::Director *>(arg1);
    if (!director__p_OVBuffer) {
        obj1 = SWIG_NewPointerObj(arg1, SWIGTYPE_p_OVBuffer, 0);
    } else {
        obj1 = director__p_OVBuffer->swig_get_self();
        Py_INCREF(obj1);
    }
    director__p_OVCandidate = dynamic_cast<Swig::Director *>(arg2);
    if (!director__p_OVCandidate) {
        obj2 = SWIG_NewPointerObj(arg2, SWIGTYPE_p_OVCandidate, 0);
    } else {
        obj2 = director__p_OVCandidate->swig_get_self();
        Py_INCREF(obj2);
    }
    director__p_OVService = dynamic_cast<Swig::Director *>(arg3);
    if (!director__p_OVService) {
        obj3 = SWIG_NewPointerObj(arg3, SWIGTYPE_p_OVService, 0);
    } else {
        obj3 = director__p_OVService->swig_get_self();
        Py_INCREF(obj3);
    }
    result = PyObject_CallMethod(swig_get_self(), "keyEvent", "OOOO" ,obj0,obj1,obj2,obj3);
    c_result = (int) PyInt_AsLong(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyInt_AsLong");
    Py_XDECREF(result);
    return c_result;
}


void SwigDirector_OVInputMethodContext::start(OVBuffer *arg0, OVCandidate *arg1, OVService *arg2) {
    Swig::Director * director__p_OVBuffer = 0 ;
    PyObject * obj0 = 0 ;
    Swig::Director * director__p_OVCandidate = 0 ;
    PyObject * obj1 = 0 ;
    Swig::Director * director__p_OVService = 0 ;
    PyObject * obj2 = 0 ;
    PyObject *result;
    
    if (swig_get_up()) {
        OVInputMethodContext::start(arg0,arg1,arg2);
        return;
    }
    director__p_OVBuffer = dynamic_cast<Swig::Director *>(arg0);
    if (!director__p_OVBuffer) {
        obj0 = SWIG_NewPointerObj(arg0, SWIGTYPE_p_OVBuffer, 0);
    } else {
        obj0 = director__p_OVBuffer->swig_get_self();
        Py_INCREF(obj0);
    }
    director__p_OVCandidate = dynamic_cast<Swig::Director *>(arg1);
    if (!director__p_OVCandidate) {
        obj1 = SWIG_NewPointerObj(arg1, SWIGTYPE_p_OVCandidate, 0);
    } else {
        obj1 = director__p_OVCandidate->swig_get_self();
        Py_INCREF(obj1);
    }
    director__p_OVService = dynamic_cast<Swig::Director *>(arg2);
    if (!director__p_OVService) {
        obj2 = SWIG_NewPointerObj(arg2, SWIGTYPE_p_OVService, 0);
    } else {
        obj2 = director__p_OVService->swig_get_self();
        Py_INCREF(obj2);
    }
    result = PyObject_CallMethod(swig_get_self(), "start", "OOO" ,obj0,obj1,obj2);
    Py_XDECREF(result);
}


SwigDirector_OVModule::SwigDirector_OVModule(PyObject* self, bool disown) : Swig::Director(self, disown) {
    
}



char const *SwigDirector_OVModule::localizedName(char const *locale) {
    char *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        return OVModule::localizedName(locale);
    }
    result = PyObject_CallMethod(swig_get_self(), "localizedName", "s" ,locale);
    c_result = (char *) PyString_AsString(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyString_AsString");
    Py_XDECREF(result);
    return c_result;
}


int SwigDirector_OVModule::initialize(OVDictionary *moduleCfg, OVService *srv, char const *modulePath) {
    Swig::Director * director__p_OVDictionary = 0 ;
    PyObject * obj0 = 0 ;
    Swig::Director * director__p_OVService = 0 ;
    PyObject * obj1 = 0 ;
    int c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        return OVModule::initialize(moduleCfg,srv,modulePath);
    }
    director__p_OVDictionary = dynamic_cast<Swig::Director *>(moduleCfg);
    if (!director__p_OVDictionary) {
        obj0 = SWIG_NewPointerObj(moduleCfg, SWIGTYPE_p_OVDictionary, 0);
    } else {
        obj0 = director__p_OVDictionary->swig_get_self();
        Py_INCREF(obj0);
    }
    director__p_OVService = dynamic_cast<Swig::Director *>(srv);
    if (!director__p_OVService) {
        obj1 = SWIG_NewPointerObj(srv, SWIGTYPE_p_OVService, 0);
    } else {
        obj1 = director__p_OVService->swig_get_self();
        Py_INCREF(obj1);
    }
    result = PyObject_CallMethod(swig_get_self(), "initialize", "OOs" ,obj0,obj1,modulePath);
    c_result = (int) PyInt_AsLong(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyInt_AsLong");
    Py_XDECREF(result);
    return c_result;
}


char const *SwigDirector_OVModule::moduleType() {
    char *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "moduleType", NULL);
    c_result = (char *) PyString_AsString(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyString_AsString");
    Py_XDECREF(result);
    return c_result;
}


char const *SwigDirector_OVModule::identifier() {
    char *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "identifier", NULL);
    c_result = (char *) PyString_AsString(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyString_AsString");
    Py_XDECREF(result);
    return c_result;
}


void SwigDirector_OVModule::update(OVDictionary *moduleCfg, OVService *srv) {
    Swig::Director * director__p_OVDictionary = 0 ;
    PyObject * obj0 = 0 ;
    Swig::Director * director__p_OVService = 0 ;
    PyObject * obj1 = 0 ;
    PyObject *result;
    
    if (swig_get_up()) {
        OVModule::update(moduleCfg,srv);
        return;
    }
    director__p_OVDictionary = dynamic_cast<Swig::Director *>(moduleCfg);
    if (!director__p_OVDictionary) {
        obj0 = SWIG_NewPointerObj(moduleCfg, SWIGTYPE_p_OVDictionary, 0);
    } else {
        obj0 = director__p_OVDictionary->swig_get_self();
        Py_INCREF(obj0);
    }
    director__p_OVService = dynamic_cast<Swig::Director *>(srv);
    if (!director__p_OVService) {
        obj1 = SWIG_NewPointerObj(srv, SWIGTYPE_p_OVService, 0);
    } else {
        obj1 = director__p_OVService->swig_get_self();
        Py_INCREF(obj1);
    }
    result = PyObject_CallMethod(swig_get_self(), "update", "OO" ,obj0,obj1);
    Py_XDECREF(result);
}


SwigDirector_OVInputMethod::SwigDirector_OVInputMethod(PyObject* self, bool disown) : Swig::Director(self, disown) {
    
}



char const *SwigDirector_OVInputMethod::localizedName(char const *locale) {
    char *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        return OVModule::localizedName(locale);
    }
    result = PyObject_CallMethod(swig_get_self(), "localizedName", "s" ,locale);
    c_result = (char *) PyString_AsString(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyString_AsString");
    Py_XDECREF(result);
    return c_result;
}


int SwigDirector_OVInputMethod::initialize(OVDictionary *moduleCfg, OVService *srv, char const *modulePath) {
    Swig::Director * director__p_OVDictionary = 0 ;
    PyObject * obj0 = 0 ;
    Swig::Director * director__p_OVService = 0 ;
    PyObject * obj1 = 0 ;
    int c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        return OVModule::initialize(moduleCfg,srv,modulePath);
    }
    director__p_OVDictionary = dynamic_cast<Swig::Director *>(moduleCfg);
    if (!director__p_OVDictionary) {
        obj0 = SWIG_NewPointerObj(moduleCfg, SWIGTYPE_p_OVDictionary, 0);
    } else {
        obj0 = director__p_OVDictionary->swig_get_self();
        Py_INCREF(obj0);
    }
    director__p_OVService = dynamic_cast<Swig::Director *>(srv);
    if (!director__p_OVService) {
        obj1 = SWIG_NewPointerObj(srv, SWIGTYPE_p_OVService, 0);
    } else {
        obj1 = director__p_OVService->swig_get_self();
        Py_INCREF(obj1);
    }
    result = PyObject_CallMethod(swig_get_self(), "initialize", "OOs" ,obj0,obj1,modulePath);
    c_result = (int) PyInt_AsLong(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyInt_AsLong");
    Py_XDECREF(result);
    return c_result;
}


char const *SwigDirector_OVInputMethod::moduleType() {
    char *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        return OVInputMethod::moduleType();
    }
    result = PyObject_CallMethod(swig_get_self(), "moduleType", NULL);
    c_result = (char *) PyString_AsString(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyString_AsString");
    Py_XDECREF(result);
    return c_result;
}


char const *SwigDirector_OVInputMethod::identifier() {
    char *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "identifier", NULL);
    c_result = (char *) PyString_AsString(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyString_AsString");
    Py_XDECREF(result);
    return c_result;
}


OVInputMethodContext *SwigDirector_OVInputMethod::newContext() {
    OVInputMethodContext *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "newContext", NULL);
    if ((SWIG_ConvertPtr(result,(void **) &c_result, SWIGTYPE_p_OVInputMethodContext,SWIG_POINTER_EXCEPTION | 0 )) == -1) throw Swig::DirectorTypeMismatchException("Pointer conversion failed.");
    Py_XDECREF(result);
    return c_result;
}


void SwigDirector_OVInputMethod::update(OVDictionary *moduleCfg, OVService *srv) {
    Swig::Director * director__p_OVDictionary = 0 ;
    PyObject * obj0 = 0 ;
    Swig::Director * director__p_OVService = 0 ;
    PyObject * obj1 = 0 ;
    PyObject *result;
    
    if (swig_get_up()) {
        OVModule::update(moduleCfg,srv);
        return;
    }
    director__p_OVDictionary = dynamic_cast<Swig::Director *>(moduleCfg);
    if (!director__p_OVDictionary) {
        obj0 = SWIG_NewPointerObj(moduleCfg, SWIGTYPE_p_OVDictionary, 0);
    } else {
        obj0 = director__p_OVDictionary->swig_get_self();
        Py_INCREF(obj0);
    }
    director__p_OVService = dynamic_cast<Swig::Director *>(srv);
    if (!director__p_OVService) {
        obj1 = SWIG_NewPointerObj(srv, SWIGTYPE_p_OVService, 0);
    } else {
        obj1 = director__p_OVService->swig_get_self();
        Py_INCREF(obj1);
    }
    result = PyObject_CallMethod(swig_get_self(), "update", "OO" ,obj0,obj1);
    Py_XDECREF(result);
}


SwigDirector_OVOutputFilter::SwigDirector_OVOutputFilter(PyObject* self, bool disown) : Swig::Director(self, disown) {
    
}



char const *SwigDirector_OVOutputFilter::localizedName(char const *locale) {
    char *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        return OVModule::localizedName(locale);
    }
    result = PyObject_CallMethod(swig_get_self(), "localizedName", "s" ,locale);
    c_result = (char *) PyString_AsString(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyString_AsString");
    Py_XDECREF(result);
    return c_result;
}


int SwigDirector_OVOutputFilter::initialize(OVDictionary *moduleCfg, OVService *srv, char const *modulePath) {
    Swig::Director * director__p_OVDictionary = 0 ;
    PyObject * obj0 = 0 ;
    Swig::Director * director__p_OVService = 0 ;
    PyObject * obj1 = 0 ;
    int c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        return OVModule::initialize(moduleCfg,srv,modulePath);
    }
    director__p_OVDictionary = dynamic_cast<Swig::Director *>(moduleCfg);
    if (!director__p_OVDictionary) {
        obj0 = SWIG_NewPointerObj(moduleCfg, SWIGTYPE_p_OVDictionary, 0);
    } else {
        obj0 = director__p_OVDictionary->swig_get_self();
        Py_INCREF(obj0);
    }
    director__p_OVService = dynamic_cast<Swig::Director *>(srv);
    if (!director__p_OVService) {
        obj1 = SWIG_NewPointerObj(srv, SWIGTYPE_p_OVService, 0);
    } else {
        obj1 = director__p_OVService->swig_get_self();
        Py_INCREF(obj1);
    }
    result = PyObject_CallMethod(swig_get_self(), "initialize", "OOs" ,obj0,obj1,modulePath);
    c_result = (int) PyInt_AsLong(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyInt_AsLong");
    Py_XDECREF(result);
    return c_result;
}


char const *SwigDirector_OVOutputFilter::process(char const *source, OVService *srv) {
    Swig::Director * director__p_OVService = 0 ;
    PyObject * obj0 = 0 ;
    char *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    director__p_OVService = dynamic_cast<Swig::Director *>(srv);
    if (!director__p_OVService) {
        obj0 = SWIG_NewPointerObj(srv, SWIGTYPE_p_OVService, 0);
    } else {
        obj0 = director__p_OVService->swig_get_self();
        Py_INCREF(obj0);
    }
    result = PyObject_CallMethod(swig_get_self(), "process", "sO" ,source,obj0);
    c_result = (char *) PyString_AsString(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyString_AsString");
    Py_XDECREF(result);
    return c_result;
}


char const *SwigDirector_OVOutputFilter::moduleType() {
    char *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        return OVOutputFilter::moduleType();
    }
    result = PyObject_CallMethod(swig_get_self(), "moduleType", NULL);
    c_result = (char *) PyString_AsString(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyString_AsString");
    Py_XDECREF(result);
    return c_result;
}


char const *SwigDirector_OVOutputFilter::identifier() {
    char *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "identifier", NULL);
    c_result = (char *) PyString_AsString(result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using PyString_AsString");
    Py_XDECREF(result);
    return c_result;
}


void SwigDirector_OVOutputFilter::update(OVDictionary *moduleCfg, OVService *srv) {
    Swig::Director * director__p_OVDictionary = 0 ;
    PyObject * obj0 = 0 ;
    Swig::Director * director__p_OVService = 0 ;
    PyObject * obj1 = 0 ;
    PyObject *result;
    
    if (swig_get_up()) {
        OVModule::update(moduleCfg,srv);
        return;
    }
    director__p_OVDictionary = dynamic_cast<Swig::Director *>(moduleCfg);
    if (!director__p_OVDictionary) {
        obj0 = SWIG_NewPointerObj(moduleCfg, SWIGTYPE_p_OVDictionary, 0);
    } else {
        obj0 = director__p_OVDictionary->swig_get_self();
        Py_INCREF(obj0);
    }
    director__p_OVService = dynamic_cast<Swig::Director *>(srv);
    if (!director__p_OVService) {
        obj1 = SWIG_NewPointerObj(srv, SWIGTYPE_p_OVService, 0);
    } else {
        obj1 = director__p_OVService->swig_get_self();
        Py_INCREF(obj1);
    }
    result = PyObject_CallMethod(swig_get_self(), "update", "OO" ,obj0,obj1);
    Py_XDECREF(result);
}


#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_delete_OVBase(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVBase *arg1 = (OVBase *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_OVBase",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVBase,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_OVBase(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVBase *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_OVBase")) goto fail;
    result = (OVBase *)new OVBase();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_OVBase, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * OVBase_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_OVBase, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_OVKeyCode_code(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVKeyCode *arg1 = (OVKeyCode *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OVKeyCode_code",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVKeyCode,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (int)(arg1)->code();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVKeyCode_isShift(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVKeyCode *arg1 = (OVKeyCode *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OVKeyCode_isShift",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVKeyCode,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (int)(arg1)->isShift();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVKeyCode_isCapslock(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVKeyCode *arg1 = (OVKeyCode *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OVKeyCode_isCapslock",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVKeyCode,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (int)(arg1)->isCapslock();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVKeyCode_isCtrl(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVKeyCode *arg1 = (OVKeyCode *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OVKeyCode_isCtrl",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVKeyCode,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (int)(arg1)->isCtrl();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVKeyCode_isAlt(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVKeyCode *arg1 = (OVKeyCode *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OVKeyCode_isAlt",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVKeyCode,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (int)(arg1)->isAlt();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVKeyCode_isOpt(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVKeyCode *arg1 = (OVKeyCode *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OVKeyCode_isOpt",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVKeyCode,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (int)(arg1)->isOpt();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVKeyCode_isCommand(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVKeyCode *arg1 = (OVKeyCode *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OVKeyCode_isCommand",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVKeyCode,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (int)(arg1)->isCommand();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVKeyCode_isNum(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVKeyCode *arg1 = (OVKeyCode *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OVKeyCode_isNum",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVKeyCode,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (int)(arg1)->isNum();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVKeyCode_isFunctionKey(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVKeyCode *arg1 = (OVKeyCode *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OVKeyCode_isFunctionKey",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVKeyCode,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (int)(arg1)->isFunctionKey();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_OVKeyCode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PyObject *arg1 = (PyObject *) 0 ;
    OVKeyCode *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_OVKeyCode",&obj0)) goto fail;
    arg1 = obj0;
    result = (OVKeyCode *)new SwigDirector_OVKeyCode(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_OVKeyCode, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_OVKeyCode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVKeyCode *arg1 = (OVKeyCode *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_OVKeyCode",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVKeyCode,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_disown_OVKeyCode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVKeyCode *arg1 = (OVKeyCode *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:disown_OVKeyCode",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVKeyCode,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
        if (director) director->swig_disown();
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * OVKeyCode_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_OVKeyCode, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_OVBuffer_clear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVBuffer *arg1 = (OVBuffer *) 0 ;
    OVBuffer *result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    Swig::Director *resultdirector = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OVBuffer_clear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVBuffer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (OVBuffer *)(arg1)->clear();
    
    resultdirector = dynamic_cast<Swig::Director *>(result);
    if (resultdirector) {
        resultobj = resultdirector->swig_get_self();
        Py_INCREF(resultobj);
    } else {
        resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_OVBuffer, 0);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVBuffer_append(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVBuffer *arg1 = (OVBuffer *) 0 ;
    char *arg2 ;
    OVBuffer *result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    Swig::Director *resultdirector = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:OVBuffer_append",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVBuffer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (OVBuffer *)(arg1)->append((char const *)arg2);
    
    resultdirector = dynamic_cast<Swig::Director *>(result);
    if (resultdirector) {
        resultobj = resultdirector->swig_get_self();
        Py_INCREF(resultobj);
    } else {
        resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_OVBuffer, 0);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVBuffer_send(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVBuffer *arg1 = (OVBuffer *) 0 ;
    OVBuffer *result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    Swig::Director *resultdirector = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OVBuffer_send",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVBuffer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (OVBuffer *)(arg1)->send();
    
    resultdirector = dynamic_cast<Swig::Director *>(result);
    if (resultdirector) {
        resultobj = resultdirector->swig_get_self();
        Py_INCREF(resultobj);
    } else {
        resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_OVBuffer, 0);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVBuffer_update__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVBuffer *arg1 = (OVBuffer *) 0 ;
    OVBuffer *result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    Swig::Director *resultdirector = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OVBuffer_update",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVBuffer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (OVBuffer *)(arg1)->update();
    
    resultdirector = dynamic_cast<Swig::Director *>(result);
    if (resultdirector) {
        resultobj = resultdirector->swig_get_self();
        Py_INCREF(resultobj);
    } else {
        resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_OVBuffer, 0);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVBuffer_update__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVBuffer *arg1 = (OVBuffer *) 0 ;
    int arg2 ;
    int arg3 = (int) -1 ;
    int arg4 = (int) -1 ;
    OVBuffer *result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    Swig::Director *resultdirector = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi|ii:OVBuffer_update",&obj0,&arg2,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVBuffer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (OVBuffer *)(arg1)->update(arg2,arg3,arg4);
    
    resultdirector = dynamic_cast<Swig::Director *>(result);
    if (resultdirector) {
        resultobj = resultdirector->swig_get_self();
        Py_INCREF(resultobj);
    } else {
        resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_OVBuffer, 0);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVBuffer_update(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_OVBuffer, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_OVBuffer_update__SWIG_0(self,args);
        }
    }
    if ((argc >= 2) && (argc <= 4)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_OVBuffer, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_OVBuffer_update__SWIG_1(self,args);
                }
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    if (argc <= 3) {
                        return _wrap_OVBuffer_update__SWIG_1(self,args);
                    }
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_OVBuffer_update__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'OVBuffer_update'");
    return NULL;
}


static PyObject *_wrap_OVBuffer_isEmpty(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVBuffer *arg1 = (OVBuffer *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OVBuffer_isEmpty",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVBuffer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (int)(arg1)->isEmpty();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_OVBuffer(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PyObject *arg1 = (PyObject *) 0 ;
    OVBuffer *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_OVBuffer",&obj0)) goto fail;
    arg1 = obj0;
    result = (OVBuffer *)new SwigDirector_OVBuffer(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_OVBuffer, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_OVBuffer(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVBuffer *arg1 = (OVBuffer *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_OVBuffer",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVBuffer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_disown_OVBuffer(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVBuffer *arg1 = (OVBuffer *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:disown_OVBuffer",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVBuffer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
        if (director) director->swig_disown();
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * OVBuffer_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_OVBuffer, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_OVCandidate_clear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVCandidate *arg1 = (OVCandidate *) 0 ;
    OVCandidate *result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    Swig::Director *resultdirector = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OVCandidate_clear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVCandidate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (OVCandidate *)(arg1)->clear();
    
    resultdirector = dynamic_cast<Swig::Director *>(result);
    if (resultdirector) {
        resultobj = resultdirector->swig_get_self();
        Py_INCREF(resultobj);
    } else {
        resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_OVCandidate, 0);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVCandidate_append(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVCandidate *arg1 = (OVCandidate *) 0 ;
    char *arg2 ;
    OVCandidate *result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    Swig::Director *resultdirector = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:OVCandidate_append",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVCandidate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (OVCandidate *)(arg1)->append((char const *)arg2);
    
    resultdirector = dynamic_cast<Swig::Director *>(result);
    if (resultdirector) {
        resultobj = resultdirector->swig_get_self();
        Py_INCREF(resultobj);
    } else {
        resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_OVCandidate, 0);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVCandidate_hide(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVCandidate *arg1 = (OVCandidate *) 0 ;
    OVCandidate *result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    Swig::Director *resultdirector = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OVCandidate_hide",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVCandidate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (OVCandidate *)(arg1)->hide();
    
    resultdirector = dynamic_cast<Swig::Director *>(result);
    if (resultdirector) {
        resultobj = resultdirector->swig_get_self();
        Py_INCREF(resultobj);
    } else {
        resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_OVCandidate, 0);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVCandidate_show(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVCandidate *arg1 = (OVCandidate *) 0 ;
    OVCandidate *result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    Swig::Director *resultdirector = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OVCandidate_show",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVCandidate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (OVCandidate *)(arg1)->show();
    
    resultdirector = dynamic_cast<Swig::Director *>(result);
    if (resultdirector) {
        resultobj = resultdirector->swig_get_self();
        Py_INCREF(resultobj);
    } else {
        resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_OVCandidate, 0);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVCandidate_update(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVCandidate *arg1 = (OVCandidate *) 0 ;
    OVCandidate *result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    Swig::Director *resultdirector = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OVCandidate_update",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVCandidate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (OVCandidate *)(arg1)->update();
    
    resultdirector = dynamic_cast<Swig::Director *>(result);
    if (resultdirector) {
        resultobj = resultdirector->swig_get_self();
        Py_INCREF(resultobj);
    } else {
        resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_OVCandidate, 0);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVCandidate_onScreen(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVCandidate *arg1 = (OVCandidate *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OVCandidate_onScreen",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVCandidate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (int)(arg1)->onScreen();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_OVCandidate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PyObject *arg1 = (PyObject *) 0 ;
    OVCandidate *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_OVCandidate",&obj0)) goto fail;
    arg1 = obj0;
    result = (OVCandidate *)new SwigDirector_OVCandidate(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_OVCandidate, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_OVCandidate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVCandidate *arg1 = (OVCandidate *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_OVCandidate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVCandidate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_disown_OVCandidate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVCandidate *arg1 = (OVCandidate *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:disown_OVCandidate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVCandidate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
        if (director) director->swig_disown();
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * OVCandidate_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_OVCandidate, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_OVDictionary_keyExist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVDictionary *arg1 = (OVDictionary *) 0 ;
    char *arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:OVDictionary_keyExist",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVDictionary,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (int)(arg1)->keyExist((char const *)arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVDictionary_getInteger(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVDictionary *arg1 = (OVDictionary *) 0 ;
    char *arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:OVDictionary_getInteger",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVDictionary,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (int)(arg1)->getInteger((char const *)arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVDictionary_setInteger(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVDictionary *arg1 = (OVDictionary *) 0 ;
    char *arg2 ;
    int arg3 ;
    int result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"Osi:OVDictionary_setInteger",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVDictionary,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (int)(arg1)->setInteger((char const *)arg2,arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVDictionary_getString(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVDictionary *arg1 = (OVDictionary *) 0 ;
    char *arg2 ;
    char *result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:OVDictionary_getString",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVDictionary,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (char *)(arg1)->getString((char const *)arg2);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVDictionary_setString(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVDictionary *arg1 = (OVDictionary *) 0 ;
    char *arg2 ;
    char *arg3 ;
    char *result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"Oss:OVDictionary_setString",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVDictionary,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (char *)(arg1)->setString((char const *)arg2,(char const *)arg3);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVDictionary_getIntegerWithDefault(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVDictionary *arg1 = (OVDictionary *) 0 ;
    char *arg2 ;
    int arg3 ;
    int result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"Osi:OVDictionary_getIntegerWithDefault",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVDictionary,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (int)(arg1)->getIntegerWithDefault((char const *)arg2,arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVDictionary_getStringWithDefault(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVDictionary *arg1 = (OVDictionary *) 0 ;
    char *arg2 ;
    char *arg3 ;
    char *result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"Oss:OVDictionary_getStringWithDefault",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVDictionary,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (char *)(arg1)->getStringWithDefault((char const *)arg2,(char const *)arg3);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_OVDictionary(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PyObject *arg1 = (PyObject *) 0 ;
    OVDictionary *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_OVDictionary",&obj0)) goto fail;
    arg1 = obj0;
    result = (OVDictionary *)new SwigDirector_OVDictionary(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_OVDictionary, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_OVDictionary(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVDictionary *arg1 = (OVDictionary *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_OVDictionary",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVDictionary,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_disown_OVDictionary(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVDictionary *arg1 = (OVDictionary *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:disown_OVDictionary",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVDictionary,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
        if (director) director->swig_disown();
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * OVDictionary_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_OVDictionary, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_OVService_beep(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVService *arg1 = (OVService *) 0 ;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OVService_beep",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVService,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    (arg1)->beep();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVService_notify(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVService *arg1 = (OVService *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:OVService_notify",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVService,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    (arg1)->notify((char const *)arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVService_locale(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVService *arg1 = (OVService *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OVService_locale",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVService,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (char *)(arg1)->locale();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVService_userSpacePath(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVService *arg1 = (OVService *) 0 ;
    char *arg2 ;
    char *result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:OVService_userSpacePath",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVService,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (char *)(arg1)->userSpacePath((char const *)arg2);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVService_pathSeparator(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVService *arg1 = (OVService *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OVService_pathSeparator",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVService,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (char *)(arg1)->pathSeparator();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVService_toUTF8(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVService *arg1 = (OVService *) 0 ;
    char *arg2 ;
    char *arg3 ;
    char *result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"Oss:OVService_toUTF8",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVService,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (char *)(arg1)->toUTF8((char const *)arg2,(char const *)arg3);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVService_fromUTF8(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVService *arg1 = (OVService *) 0 ;
    char *arg2 ;
    char *arg3 ;
    char *result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"Oss:OVService_fromUTF8",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVService,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (char *)(arg1)->fromUTF8((char const *)arg2,(char const *)arg3);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVService_UTF16ToUTF8(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVService *arg1 = (OVService *) 0 ;
    unsigned short *arg2 = (unsigned short *) 0 ;
    int arg3 ;
    char *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOi:OVService_UTF16ToUTF8",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVService,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_unsigned_short,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (char *)(arg1)->UTF16ToUTF8(arg2,arg3);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVService_UTF8ToUTF16(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVService *arg1 = (OVService *) 0 ;
    char *arg2 ;
    unsigned short **arg3 = (unsigned short **) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OsO:OVService_UTF8ToUTF16",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVService,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_p_unsigned_short,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (int)(arg1)->UTF8ToUTF16((char const *)arg2,arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_OVService(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PyObject *arg1 = (PyObject *) 0 ;
    OVService *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_OVService",&obj0)) goto fail;
    arg1 = obj0;
    result = (OVService *)new SwigDirector_OVService(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_OVService, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_OVService(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVService *arg1 = (OVService *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_OVService",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVService,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_disown_OVService(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVService *arg1 = (OVService *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:disown_OVService",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVService,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
        if (director) director->swig_disown();
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * OVService_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_OVService, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_OVInputMethodContext_start(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVInputMethodContext *arg1 = (OVInputMethodContext *) 0 ;
    OVBuffer *arg2 = (OVBuffer *) 0 ;
    OVCandidate *arg3 = (OVCandidate *) 0 ;
    OVService *arg4 = (OVService *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:OVInputMethodContext_start",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVInputMethodContext,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_OVBuffer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_OVCandidate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_OVService,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    (arg1)->start(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVInputMethodContext_clear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVInputMethodContext *arg1 = (OVInputMethodContext *) 0 ;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OVInputMethodContext_clear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVInputMethodContext,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVInputMethodContext_end(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVInputMethodContext *arg1 = (OVInputMethodContext *) 0 ;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OVInputMethodContext_end",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVInputMethodContext,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    (arg1)->end();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVInputMethodContext_keyEvent(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVInputMethodContext *arg1 = (OVInputMethodContext *) 0 ;
    OVKeyCode *arg2 = (OVKeyCode *) 0 ;
    OVBuffer *arg3 = (OVBuffer *) 0 ;
    OVCandidate *arg4 = (OVCandidate *) 0 ;
    OVService *arg5 = (OVService *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:OVInputMethodContext_keyEvent",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVInputMethodContext,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_OVKeyCode,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_OVBuffer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_OVCandidate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **) &arg5, SWIGTYPE_p_OVService,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (int)(arg1)->keyEvent(arg2,arg3,arg4,arg5);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_OVInputMethodContext(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PyObject *arg1 = (PyObject *) 0 ;
    OVInputMethodContext *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_OVInputMethodContext",&obj0)) goto fail;
    arg1 = obj0;
    result = (OVInputMethodContext *)new SwigDirector_OVInputMethodContext(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_OVInputMethodContext, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_OVInputMethodContext(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVInputMethodContext *arg1 = (OVInputMethodContext *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_OVInputMethodContext",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVInputMethodContext,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_disown_OVInputMethodContext(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVInputMethodContext *arg1 = (OVInputMethodContext *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:disown_OVInputMethodContext",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVInputMethodContext,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
        if (director) director->swig_disown();
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * OVInputMethodContext_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_OVInputMethodContext, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_OVModule_moduleType(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVModule *arg1 = (OVModule *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OVModule_moduleType",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (char *)(arg1)->moduleType();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVModule_identifier(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVModule *arg1 = (OVModule *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OVModule_identifier",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (char *)(arg1)->identifier();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVModule_localizedName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVModule *arg1 = (OVModule *) 0 ;
    char *arg2 ;
    char *result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:OVModule_localizedName",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (char *)(arg1)->localizedName((char const *)arg2);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVModule_initialize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVModule *arg1 = (OVModule *) 0 ;
    OVDictionary *arg2 = (OVDictionary *) 0 ;
    OVService *arg3 = (OVService *) 0 ;
    char *arg4 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOs:OVModule_initialize",&obj0,&obj1,&obj2,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_OVDictionary,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_OVService,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (int)(arg1)->initialize(arg2,arg3,(char const *)arg4);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVModule_update(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVModule *arg1 = (OVModule *) 0 ;
    OVDictionary *arg2 = (OVDictionary *) 0 ;
    OVService *arg3 = (OVService *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OVModule_update",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_OVDictionary,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_OVService,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    (arg1)->update(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_OVModule(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PyObject *arg1 = (PyObject *) 0 ;
    OVModule *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_OVModule",&obj0)) goto fail;
    arg1 = obj0;
    result = (OVModule *)new SwigDirector_OVModule(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_OVModule, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_OVModule(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVModule *arg1 = (OVModule *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_OVModule",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_disown_OVModule(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVModule *arg1 = (OVModule *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:disown_OVModule",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
        if (director) director->swig_disown();
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * OVModule_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_OVModule, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_OVInputMethod_newContext(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVInputMethod *arg1 = (OVInputMethod *) 0 ;
    OVInputMethodContext *result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    Swig::Director *resultdirector = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OVInputMethod_newContext",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVInputMethod,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (OVInputMethodContext *)(arg1)->newContext();
    
    resultdirector = dynamic_cast<Swig::Director *>(result);
    if (resultdirector) {
        resultobj = resultdirector->swig_get_self();
        Py_INCREF(resultobj);
    } else {
        resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_OVInputMethodContext, 0);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVInputMethod_moduleType(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVInputMethod *arg1 = (OVInputMethod *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OVInputMethod_moduleType",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVInputMethod,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (char *)(arg1)->moduleType();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_OVInputMethod(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PyObject *arg1 = (PyObject *) 0 ;
    OVInputMethod *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_OVInputMethod",&obj0)) goto fail;
    arg1 = obj0;
    result = (OVInputMethod *)new SwigDirector_OVInputMethod(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_OVInputMethod, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_OVInputMethod(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVInputMethod *arg1 = (OVInputMethod *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_OVInputMethod",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVInputMethod,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_disown_OVInputMethod(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVInputMethod *arg1 = (OVInputMethod *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:disown_OVInputMethod",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVInputMethod,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
        if (director) director->swig_disown();
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * OVInputMethod_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_OVInputMethod, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_OVOutputFilter_process(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVOutputFilter *arg1 = (OVOutputFilter *) 0 ;
    char *arg2 ;
    OVService *arg3 = (OVService *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OsO:OVOutputFilter_process",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVOutputFilter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_OVService,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (char *)(arg1)->process((char const *)arg2,arg3);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OVOutputFilter_moduleType(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVOutputFilter *arg1 = (OVOutputFilter *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OVOutputFilter_moduleType",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVOutputFilter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    result = (char *)(arg1)->moduleType();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_OVOutputFilter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PyObject *arg1 = (PyObject *) 0 ;
    OVOutputFilter *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_OVOutputFilter",&obj0)) goto fail;
    arg1 = obj0;
    result = (OVOutputFilter *)new SwigDirector_OVOutputFilter(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_OVOutputFilter, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_OVOutputFilter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVOutputFilter *arg1 = (OVOutputFilter *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_OVOutputFilter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVOutputFilter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_disown_OVOutputFilter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    OVOutputFilter *arg1 = (OVOutputFilter *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:disown_OVOutputFilter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_OVOutputFilter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
        if (director) director->swig_disown();
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * OVOutputFilter_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_OVOutputFilter, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyMethodDef SwigMethods[] = {
	 { (char *)"delete_OVBase", _wrap_delete_OVBase, METH_VARARGS },
	 { (char *)"new_OVBase", _wrap_new_OVBase, METH_VARARGS },
	 { (char *)"OVBase_swigregister", OVBase_swigregister, METH_VARARGS },
	 { (char *)"OVKeyCode_code", _wrap_OVKeyCode_code, METH_VARARGS },
	 { (char *)"OVKeyCode_isShift", _wrap_OVKeyCode_isShift, METH_VARARGS },
	 { (char *)"OVKeyCode_isCapslock", _wrap_OVKeyCode_isCapslock, METH_VARARGS },
	 { (char *)"OVKeyCode_isCtrl", _wrap_OVKeyCode_isCtrl, METH_VARARGS },
	 { (char *)"OVKeyCode_isAlt", _wrap_OVKeyCode_isAlt, METH_VARARGS },
	 { (char *)"OVKeyCode_isOpt", _wrap_OVKeyCode_isOpt, METH_VARARGS },
	 { (char *)"OVKeyCode_isCommand", _wrap_OVKeyCode_isCommand, METH_VARARGS },
	 { (char *)"OVKeyCode_isNum", _wrap_OVKeyCode_isNum, METH_VARARGS },
	 { (char *)"OVKeyCode_isFunctionKey", _wrap_OVKeyCode_isFunctionKey, METH_VARARGS },
	 { (char *)"new_OVKeyCode", _wrap_new_OVKeyCode, METH_VARARGS },
	 { (char *)"delete_OVKeyCode", _wrap_delete_OVKeyCode, METH_VARARGS },
	 { (char *)"disown_OVKeyCode", _wrap_disown_OVKeyCode, METH_VARARGS },
	 { (char *)"OVKeyCode_swigregister", OVKeyCode_swigregister, METH_VARARGS },
	 { (char *)"OVBuffer_clear", _wrap_OVBuffer_clear, METH_VARARGS },
	 { (char *)"OVBuffer_append", _wrap_OVBuffer_append, METH_VARARGS },
	 { (char *)"OVBuffer_send", _wrap_OVBuffer_send, METH_VARARGS },
	 { (char *)"OVBuffer_update", _wrap_OVBuffer_update, METH_VARARGS },
	 { (char *)"OVBuffer_isEmpty", _wrap_OVBuffer_isEmpty, METH_VARARGS },
	 { (char *)"new_OVBuffer", _wrap_new_OVBuffer, METH_VARARGS },
	 { (char *)"delete_OVBuffer", _wrap_delete_OVBuffer, METH_VARARGS },
	 { (char *)"disown_OVBuffer", _wrap_disown_OVBuffer, METH_VARARGS },
	 { (char *)"OVBuffer_swigregister", OVBuffer_swigregister, METH_VARARGS },
	 { (char *)"OVCandidate_clear", _wrap_OVCandidate_clear, METH_VARARGS },
	 { (char *)"OVCandidate_append", _wrap_OVCandidate_append, METH_VARARGS },
	 { (char *)"OVCandidate_hide", _wrap_OVCandidate_hide, METH_VARARGS },
	 { (char *)"OVCandidate_show", _wrap_OVCandidate_show, METH_VARARGS },
	 { (char *)"OVCandidate_update", _wrap_OVCandidate_update, METH_VARARGS },
	 { (char *)"OVCandidate_onScreen", _wrap_OVCandidate_onScreen, METH_VARARGS },
	 { (char *)"new_OVCandidate", _wrap_new_OVCandidate, METH_VARARGS },
	 { (char *)"delete_OVCandidate", _wrap_delete_OVCandidate, METH_VARARGS },
	 { (char *)"disown_OVCandidate", _wrap_disown_OVCandidate, METH_VARARGS },
	 { (char *)"OVCandidate_swigregister", OVCandidate_swigregister, METH_VARARGS },
	 { (char *)"OVDictionary_keyExist", _wrap_OVDictionary_keyExist, METH_VARARGS },
	 { (char *)"OVDictionary_getInteger", _wrap_OVDictionary_getInteger, METH_VARARGS },
	 { (char *)"OVDictionary_setInteger", _wrap_OVDictionary_setInteger, METH_VARARGS },
	 { (char *)"OVDictionary_getString", _wrap_OVDictionary_getString, METH_VARARGS },
	 { (char *)"OVDictionary_setString", _wrap_OVDictionary_setString, METH_VARARGS },
	 { (char *)"OVDictionary_getIntegerWithDefault", _wrap_OVDictionary_getIntegerWithDefault, METH_VARARGS },
	 { (char *)"OVDictionary_getStringWithDefault", _wrap_OVDictionary_getStringWithDefault, METH_VARARGS },
	 { (char *)"new_OVDictionary", _wrap_new_OVDictionary, METH_VARARGS },
	 { (char *)"delete_OVDictionary", _wrap_delete_OVDictionary, METH_VARARGS },
	 { (char *)"disown_OVDictionary", _wrap_disown_OVDictionary, METH_VARARGS },
	 { (char *)"OVDictionary_swigregister", OVDictionary_swigregister, METH_VARARGS },
	 { (char *)"OVService_beep", _wrap_OVService_beep, METH_VARARGS },
	 { (char *)"OVService_notify", _wrap_OVService_notify, METH_VARARGS },
	 { (char *)"OVService_locale", _wrap_OVService_locale, METH_VARARGS },
	 { (char *)"OVService_userSpacePath", _wrap_OVService_userSpacePath, METH_VARARGS },
	 { (char *)"OVService_pathSeparator", _wrap_OVService_pathSeparator, METH_VARARGS },
	 { (char *)"OVService_toUTF8", _wrap_OVService_toUTF8, METH_VARARGS },
	 { (char *)"OVService_fromUTF8", _wrap_OVService_fromUTF8, METH_VARARGS },
	 { (char *)"OVService_UTF16ToUTF8", _wrap_OVService_UTF16ToUTF8, METH_VARARGS },
	 { (char *)"OVService_UTF8ToUTF16", _wrap_OVService_UTF8ToUTF16, METH_VARARGS },
	 { (char *)"new_OVService", _wrap_new_OVService, METH_VARARGS },
	 { (char *)"delete_OVService", _wrap_delete_OVService, METH_VARARGS },
	 { (char *)"disown_OVService", _wrap_disown_OVService, METH_VARARGS },
	 { (char *)"OVService_swigregister", OVService_swigregister, METH_VARARGS },
	 { (char *)"OVInputMethodContext_start", _wrap_OVInputMethodContext_start, METH_VARARGS },
	 { (char *)"OVInputMethodContext_clear", _wrap_OVInputMethodContext_clear, METH_VARARGS },
	 { (char *)"OVInputMethodContext_end", _wrap_OVInputMethodContext_end, METH_VARARGS },
	 { (char *)"OVInputMethodContext_keyEvent", _wrap_OVInputMethodContext_keyEvent, METH_VARARGS },
	 { (char *)"new_OVInputMethodContext", _wrap_new_OVInputMethodContext, METH_VARARGS },
	 { (char *)"delete_OVInputMethodContext", _wrap_delete_OVInputMethodContext, METH_VARARGS },
	 { (char *)"disown_OVInputMethodContext", _wrap_disown_OVInputMethodContext, METH_VARARGS },
	 { (char *)"OVInputMethodContext_swigregister", OVInputMethodContext_swigregister, METH_VARARGS },
	 { (char *)"OVModule_moduleType", _wrap_OVModule_moduleType, METH_VARARGS },
	 { (char *)"OVModule_identifier", _wrap_OVModule_identifier, METH_VARARGS },
	 { (char *)"OVModule_localizedName", _wrap_OVModule_localizedName, METH_VARARGS },
	 { (char *)"OVModule_initialize", _wrap_OVModule_initialize, METH_VARARGS },
	 { (char *)"OVModule_update", _wrap_OVModule_update, METH_VARARGS },
	 { (char *)"new_OVModule", _wrap_new_OVModule, METH_VARARGS },
	 { (char *)"delete_OVModule", _wrap_delete_OVModule, METH_VARARGS },
	 { (char *)"disown_OVModule", _wrap_disown_OVModule, METH_VARARGS },
	 { (char *)"OVModule_swigregister", OVModule_swigregister, METH_VARARGS },
	 { (char *)"OVInputMethod_newContext", _wrap_OVInputMethod_newContext, METH_VARARGS },
	 { (char *)"OVInputMethod_moduleType", _wrap_OVInputMethod_moduleType, METH_VARARGS },
	 { (char *)"new_OVInputMethod", _wrap_new_OVInputMethod, METH_VARARGS },
	 { (char *)"delete_OVInputMethod", _wrap_delete_OVInputMethod, METH_VARARGS },
	 { (char *)"disown_OVInputMethod", _wrap_disown_OVInputMethod, METH_VARARGS },
	 { (char *)"OVInputMethod_swigregister", OVInputMethod_swigregister, METH_VARARGS },
	 { (char *)"OVOutputFilter_process", _wrap_OVOutputFilter_process, METH_VARARGS },
	 { (char *)"OVOutputFilter_moduleType", _wrap_OVOutputFilter_moduleType, METH_VARARGS },
	 { (char *)"new_OVOutputFilter", _wrap_new_OVOutputFilter, METH_VARARGS },
	 { (char *)"delete_OVOutputFilter", _wrap_delete_OVOutputFilter, METH_VARARGS },
	 { (char *)"disown_OVOutputFilter", _wrap_disown_OVOutputFilter, METH_VARARGS },
	 { (char *)"OVOutputFilter_swigregister", OVOutputFilter_swigregister, METH_VARARGS },
	 { NULL, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_OVOutputFilterTo_p_OVModule(void *x) {
    return (void *)((OVModule *)  ((OVOutputFilter *) x));
}
static void *_p_OVInputMethodTo_p_OVModule(void *x) {
    return (void *)((OVModule *)  ((OVInputMethod *) x));
}
static void *_p_OVCandidateTo_p_OVBase(void *x) {
    return (void *)((OVBase *)  ((OVCandidate *) x));
}
static void *_p_OVDictionaryTo_p_OVBase(void *x) {
    return (void *)((OVBase *)  ((OVDictionary *) x));
}
static void *_p_OVModuleTo_p_OVBase(void *x) {
    return (void *)((OVBase *)  ((OVModule *) x));
}
static void *_p_OVBufferTo_p_OVBase(void *x) {
    return (void *)((OVBase *)  ((OVBuffer *) x));
}
static void *_p_OVOutputFilterTo_p_OVBase(void *x) {
    return (void *)((OVBase *) (OVModule *) ((OVOutputFilter *) x));
}
static void *_p_OVKeyCodeTo_p_OVBase(void *x) {
    return (void *)((OVBase *)  ((OVKeyCode *) x));
}
static void *_p_OVServiceTo_p_OVBase(void *x) {
    return (void *)((OVBase *)  ((OVService *) x));
}
static void *_p_OVInputMethodTo_p_OVBase(void *x) {
    return (void *)((OVBase *) (OVModule *) ((OVInputMethod *) x));
}
static void *_p_OVInputMethodContextTo_p_OVBase(void *x) {
    return (void *)((OVBase *)  ((OVInputMethodContext *) x));
}
static swig_type_info _swigt__p_OVModule[] = {{"_p_OVModule", 0, "OVModule *", 0},{"_p_OVModule"},{"_p_OVOutputFilter", _p_OVOutputFilterTo_p_OVModule},{"_p_OVInputMethod", _p_OVInputMethodTo_p_OVModule},{0}};
static swig_type_info _swigt__p_OVCandidate[] = {{"_p_OVCandidate", 0, "OVCandidate *", 0},{"_p_OVCandidate"},{0}};
static swig_type_info _swigt__p_OVDictionary[] = {{"_p_OVDictionary", 0, "OVDictionary *", 0},{"_p_OVDictionary"},{0}};
static swig_type_info _swigt__p_OVBuffer[] = {{"_p_OVBuffer", 0, "OVBuffer *", 0},{"_p_OVBuffer"},{0}};
static swig_type_info _swigt__p_OVOutputFilter[] = {{"_p_OVOutputFilter", 0, "OVOutputFilter *", 0},{"_p_OVOutputFilter"},{0}};
static swig_type_info _swigt__p_OVKeyCode[] = {{"_p_OVKeyCode", 0, "OVKeyCode *", 0},{"_p_OVKeyCode"},{0}};
static swig_type_info _swigt__p_OVService[] = {{"_p_OVService", 0, "OVService *", 0},{"_p_OVService"},{0}};
static swig_type_info _swigt__p_OVInputMethod[] = {{"_p_OVInputMethod", 0, "OVInputMethod *", 0},{"_p_OVInputMethod"},{0}};
static swig_type_info _swigt__p_OVInputMethodContext[] = {{"_p_OVInputMethodContext", 0, "OVInputMethodContext *", 0},{"_p_OVInputMethodContext"},{0}};
static swig_type_info _swigt__p_OVBase[] = {{"_p_OVBase", 0, "OVBase *", 0},{"_p_OVCandidate", _p_OVCandidateTo_p_OVBase},{"_p_OVDictionary", _p_OVDictionaryTo_p_OVBase},{"_p_OVModule", _p_OVModuleTo_p_OVBase},{"_p_OVBuffer", _p_OVBufferTo_p_OVBase},{"_p_OVOutputFilter", _p_OVOutputFilterTo_p_OVBase},{"_p_OVInputMethod", _p_OVInputMethodTo_p_OVBase},{"_p_OVKeyCode", _p_OVKeyCodeTo_p_OVBase},{"_p_OVService", _p_OVServiceTo_p_OVBase},{"_p_OVInputMethodContext", _p_OVInputMethodContextTo_p_OVBase},{"_p_OVBase"},{0}};
static swig_type_info _swigt__p_p_unsigned_short[] = {{"_p_p_unsigned_short", 0, "unsigned short **", 0},{"_p_p_unsigned_short"},{0}};
static swig_type_info _swigt__p_unsigned_short[] = {{"_p_unsigned_short", 0, "unsigned short *", 0},{"_p_unsigned_short"},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_OVModule, 
_swigt__p_OVCandidate, 
_swigt__p_OVDictionary, 
_swigt__p_OVBuffer, 
_swigt__p_OVOutputFilter, 
_swigt__p_OVKeyCode, 
_swigt__p_OVService, 
_swigt__p_OVInputMethod, 
_swigt__p_OVInputMethodContext, 
_swigt__p_OVBase, 
_swigt__p_p_unsigned_short, 
_swigt__p_unsigned_short, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{ SWIG_PY_INT,     (char *)"ovkEsc", (long) ovkEsc, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ovkSpace", (long) ovkSpace, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ovkReturn", (long) ovkReturn, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ovkDelete", (long) ovkDelete, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ovkBackspace", (long) ovkBackspace, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ovkUp", (long) ovkUp, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ovkDown", (long) ovkDown, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ovkLeft", (long) ovkLeft, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ovkRight", (long) ovkRight, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ovkHome", (long) ovkHome, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ovkEnd", (long) ovkEnd, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ovkPageUp", (long) ovkPageUp, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ovkPageDown", (long) ovkPageDown, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ovkTab", (long) ovkTab, 0, 0, 0},
{0}};

#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    static int       typeinit = 0;
    PyObject *m, *d;
    int       i;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    if (!typeinit) {
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        typeinit = 1;
    }
    SWIG_InstallConstants(d,swig_const_table);
    
}

