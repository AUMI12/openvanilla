// -*- C++ -*- generated by wxGlade 0.3.5.1 on Sat Aug 20 16:34:47 2005

#include "OVPrefDlg.h"

BEGIN_EVENT_TABLE( OVPrefDlg, wxDialog )
	EVT_BUTTON( ID_FONT, OVPrefDlg::OnFont )
	EVT_BUTTON( ID_BGCOLOR, OVPrefDlg::OnBgColor )
	EVT_BUTTON( ID_BGPICTURE, OVPrefDlg::OnBgPicture )
	EVT_BUTTON( ID_SOUNDTEST, OVPrefDlg::OnSoundTest )
	EVT_BUTTON( ID_COMMON_CLEAR, OVPrefDlg::OnCommonClear )
	EVT_BUTTON( ID_MODLIST_CLEAR, OVPrefDlg::OnModListClear )
	EVT_LIST_ITEM_SELECTED(ID_MODLIST, OVPrefDlg::OnModListItemSelected )
END_EVENT_TABLE()


OVPrefDlg::OVPrefDlg(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE|wxCLIP_CHILDREN)
{
    // begin wxGlade: OVPrefDlg::OVPrefDlg
    notebook = new wxNotebook(this, -1, wxDefaultPosition, wxDefaultSize, 0);
    module_settings_page = new wxPanel(notebook, -1);
    module_list_page = new wxPanel(notebook, -1, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL|wxCLIP_CHILDREN);
    common_page = new wxPanel(notebook, -1);
    sizer_13_staticbox = new wxStaticBox(common_page, -1, _("Sound"));
    sizer_15_staticbox = new wxStaticBox(common_page, -1, _("Other settings"));
    sizer_19_staticbox = new wxStaticBox(module_list_page, -1, _("Hotkey of selected module"));
    sizer_16_staticbox = new wxStaticBox(module_list_page, -1, _("Available modules"));
    sizer_22_staticbox = new wxStaticBox(module_settings_page, -1, _("Phonetic, Chewing, POJ, and Tibetan IME"));
    sizer_24_staticbox = new wxStaticBox(module_settings_page, -1, _("Generic IME"));
    sizer_25_staticbox = new wxStaticBox(module_settings_page, -1, _("Other modules"));
    candidate_window_sizer_staticbox = new wxStaticBox(common_page, -1, _("Candidate Window"));
    font_btn = new wxButton(common_page, ID_FONT, _("Font"));
    bgcolor_btn = new wxButton(common_page, ID_BGCOLOR, _("Background color"));
    bg_picture_btn = new wxButton(common_page, ID_BGPICTURE, _("Picture"));
    filePath = new wxStaticText(common_page, -1, _("File Path:"));
    label_1 = new wxStaticText(common_page, -1, _("Opacity"));
    opacitySlider = new wxSlider(common_page, -1, 0, 0, 10, wxDefaultPosition, wxDefaultSize, wxSL_HORIZONTAL|wxSL_AUTOTICKS|wxSL_LABELS);
    label_3 = new wxStaticText(common_page, -1, _("File"));
    soundFile = new wxTextCtrl(common_page, -1, wxT(""));
    button_6 = new wxButton(common_page, ID_SOUNDTEST, _("&Test"));
    label_4 = new wxStaticText(common_page, -1, _("Switch between IMEs"));
    switchAlt = new wxCheckBox(common_page, -1, _("Alt"));
    switchCtrl = new wxCheckBox(common_page, -1, _("Ctrl"));
    switchShift = new wxCheckBox(common_page, -1, _("Shift"));
    label_15 = new wxStaticText(common_page, -1, _(" + "));
    const wxString switchKey_choices[] = {
        wxT("")
    };
    switchKey = new wxComboBox(common_page, -1, wxT(""), wxDefaultPosition, wxDefaultSize, 1, switchKey_choices, wxCB_DROPDOWN|wxCB_SIMPLE|wxCB_READONLY);
    common_clear = new wxButton(common_page, ID_COMMON_CLEAR, _("Clear"));
    const wxString modList_choices[] = {
        wxT("")
    };
    modList = new wxCheckListBox(module_list_page, ID_MODLIST, wxDefaultPosition, wxDefaultSize, 1, modList_choices, wxLB_SINGLE|wxLB_HSCROLL);
    modlistAlt = new wxCheckBox(module_list_page, -1, _("Alt"));
    modlistShift = new wxCheckBox(module_list_page, -1, _("Shift"));
    modlistCtrl = new wxCheckBox(module_list_page, -1, _("Ctrl"));
    modlist_clear = new wxButton(module_list_page, ID_MODLIST_CLEAR, _("Clear"));
    label_8 = new wxStaticText(module_list_page, -1, _("+"));
    const wxString modlistKey_choices[] = {
        _("None")
    };
    modlistKey = new wxComboBox(module_list_page, -1, wxT(""), wxDefaultPosition, wxDefaultSize, 1, modlistKey_choices, wxCB_DROPDOWN|wxCB_SIMPLE|wxCB_READONLY);
    label_7 = new wxStaticText(module_list_page, -1, _("The selected module is loaded \nfrom the following library:\n"));
    label_6 = new wxStaticText(module_list_page, -1, _("Remove unused modules \ncan speed up loading.\nYou have to exit and restart \nexisting applications using \nOpenVanilla or this won't \ntake effect."));
    label_9 = new wxStaticText(module_settings_page, -1, _("Keyboard layout of traditional Phonetic IME: "));
    const wxString phoneticKeyboardLayout_choices[] = {
        _("Standard Layout")
    };
    phoneticKeyboardLayout = new wxComboBox(module_settings_page, -1, wxT(""), wxDefaultPosition, wxDefaultSize, 1, phoneticKeyboardLayout_choices, wxCB_DROPDOWN|wxCB_SIMPLE|wxCB_READONLY);
    label_9_copy = new wxStaticText(module_settings_page, -1, _("Keyboard layout of Chewing IME: "));
    const wxString chewingKeyboardLayout_choices[] = {
        _("Standard Layout")
    };
    chewingKeyboardLayout = new wxComboBox(module_settings_page, -1, wxT(""), wxDefaultPosition, wxDefaultSize, 1, chewingKeyboardLayout_choices, wxCB_DROPDOWN|wxCB_SIMPLE|wxCB_READONLY);
    label_10 = new wxStaticText(module_settings_page, -1, _("Input mode of POJ: "));
    const wxString pojInputMode_choices[] = {
        _("Default (2, 3, 5, 7, 8)")
    };
    pojInputMode = new wxComboBox(module_settings_page, -1, wxT(""), wxDefaultPosition, wxDefaultSize, 1, pojInputMode_choices, wxCB_DROPDOWN|wxCB_SIMPLE|wxCB_READONLY);
    pojNoUnicode = new wxCheckBox(module_settings_page, -1, _("Don't output unicode characters but use ASCII instead"));
    pojDirect = new wxCheckBox(module_settings_page, -1, _("Use POJ directly"));
    label_11 = new wxStaticText(module_settings_page, -1, _("Tibetan IME"));
    const wxString tibetanIME_choices[] = {
        _("Sambhota Keymap One")
    };
    tibetanIME = new wxComboBox(module_settings_page, -1, wxT(""), wxDefaultPosition, wxDefaultSize, 1, tibetanIME_choices, wxCB_DROPDOWN|wxCB_SIMPLE|wxCB_READONLY);
    label_12 = new wxStaticText(module_settings_page, -1, _("IME: "));
    const wxString genericCombo_choices[] = {
        _("None")
    };
    genericCombo = new wxComboBox(module_settings_page, -1, wxT(""), wxDefaultPosition, wxDefaultSize, 1, genericCombo_choices, wxCB_DROPDOWN|wxCB_SIMPLE|wxCB_READONLY);
    label_13 = new wxStaticText(module_settings_page, -1, _("Max length: "));
    const wxString genericMaxLength_choices[] = {
        _("5")
    };
    genericMaxLength = new wxComboBox(module_settings_page, -1, wxT(""), wxDefaultPosition, wxDefaultSize, 1, genericMaxLength_choices, wxCB_DROPDOWN|wxCB_SIMPLE|wxCB_READONLY);
    checkbox_10 = new wxCheckBox(module_settings_page, -1, _("checkbox_10"));
    checkbox_11 = new wxCheckBox(module_settings_page, -1, _("checkbox_11"));
    checkbox_12 = new wxCheckBox(module_settings_page, -1, _("checkbox_12"));
    genericBeepOnError = new wxCheckBox(module_settings_page, -1, _("Beep on error"));
    label_14 = new wxStaticText(module_settings_page, -1, _("Module: "));
    const wxString otherModCombo_choices[] = {
        _("None")
    };
    otherModCombo = new wxComboBox(module_settings_page, -1, wxT(""), wxDefaultPosition, wxDefaultSize, 1, otherModCombo_choices, wxCB_DROPDOWN|wxCB_SIMPLE|wxCB_READONLY);
    otherModList = new wxListCtrl(module_settings_page, -1, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxSUNKEN_BORDER);
    output_filter_page = new wxPanel(notebook, -1);
    ok_btn = new wxButton(this, wxID_OK, _("&OK"));
    cancel_btn = new wxButton(this, wxID_CANCEL, _("&Cancel"));

    set_properties();
    do_layout();
    // end wxGlade

	otherModList->InsertColumn( 0, _("Config Item") );
	otherModList->InsertColumn( 1, _("Value") );
}

#if !defined(__WXMSW__)
	#include "ovpref.xpm"
#endif

void OVPrefDlg::set_properties()
{
    // begin wxGlade: OVPrefDlg::set_properties
    SetTitle(_("Open Vanilla Preferences"));
    opacitySlider->SetSize(wxSize(176, 20));
    switchKey->SetSelection(-1);
    modList->SetSelection(0);
    modlistKey->SetSelection(-1);
    phoneticKeyboardLayout->SetSelection(0);
    chewingKeyboardLayout->SetSelection(0);
    pojInputMode->SetSelection(0);
    tibetanIME->SetSelection(0);
    genericCombo->SetSelection(-1);
    genericMaxLength->SetSelection(-1);
    otherModCombo->SetSelection(-1);
    ok_btn->SetDefault();
    // end wxGlade
	SetIcon(wxICON(ovpref_icon));
}


void OVPrefDlg::do_layout()
{
    // begin wxGlade: OVPrefDlg::do_layout
    wxBoxSizer* top_sizer = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* bottom_sizer = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* module_settings_sizer = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_23 = new wxBoxSizer(wxHORIZONTAL);
    wxStaticBoxSizer* sizer_25 = new wxStaticBoxSizer(sizer_25_staticbox, wxVERTICAL);
    wxBoxSizer* sizer_33 = new wxBoxSizer(wxHORIZONTAL);
    wxStaticBoxSizer* sizer_24 = new wxStaticBoxSizer(sizer_24_staticbox, wxVERTICAL);
    wxBoxSizer* sizer_32 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_31 = new wxBoxSizer(wxHORIZONTAL);
    wxStaticBoxSizer* sizer_22 = new wxStaticBoxSizer(sizer_22_staticbox, wxVERTICAL);
    wxBoxSizer* sizer_30 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_29 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_28 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_27 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_26_copy = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_26 = new wxBoxSizer(wxHORIZONTAL);
    wxStaticBoxSizer* sizer_16 = new wxStaticBoxSizer(sizer_16_staticbox, wxHORIZONTAL);
    wxBoxSizer* sizer_17 = new wxBoxSizer(wxVERTICAL);
    wxStaticBoxSizer* sizer_19 = new wxStaticBoxSizer(sizer_19_staticbox, wxHORIZONTAL);
    wxBoxSizer* sizer_20 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* common_page_sizer = new wxBoxSizer(wxVERTICAL);
    wxStaticBoxSizer* sizer_15 = new wxStaticBoxSizer(sizer_15_staticbox, wxHORIZONTAL);
    wxStaticBoxSizer* sizer_13 = new wxStaticBoxSizer(sizer_13_staticbox, wxHORIZONTAL);
    wxStaticBoxSizer* candidate_window_sizer = new wxStaticBoxSizer(candidate_window_sizer_staticbox, wxVERTICAL);
    wxBoxSizer* sizer_12 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_11 = new wxBoxSizer(wxHORIZONTAL);
    candidate_window_sizer->Add(font_btn, 0, wxALL|wxFIXED_MINSIZE, 2);
    sizer_11->Add(bgcolor_btn, 0, wxLEFT|wxRIGHT|wxFIXED_MINSIZE, 2);
    sizer_11->Add(bg_picture_btn, 0, wxLEFT|wxRIGHT|wxFIXED_MINSIZE, 2);
    sizer_11->Add(filePath, 0, wxALL|wxFIXED_MINSIZE, 2);
    candidate_window_sizer->Add(sizer_11, 0, wxALL|wxEXPAND, 2);
    sizer_12->Add(label_1, 0, wxALL|wxALIGN_CENTER_VERTICAL|wxFIXED_MINSIZE, 2);
    sizer_12->Add(opacitySlider, 0, wxALL, 2);
    candidate_window_sizer->Add(sizer_12, 0, wxALL|wxEXPAND, 2);
    common_page_sizer->Add(candidate_window_sizer, 0, wxALL|wxEXPAND, 2);
    sizer_13->Add(label_3, 0, wxALL|wxALIGN_CENTER_VERTICAL|wxFIXED_MINSIZE, 2);
    sizer_13->Add(soundFile, 2, wxALL|wxFIXED_MINSIZE, 2);
    sizer_13->Add(button_6, 0, wxALL|wxFIXED_MINSIZE, 2);
    common_page_sizer->Add(sizer_13, 0, wxALL|wxEXPAND, 2);
    sizer_15->Add(label_4, 0, wxALL|wxFIXED_MINSIZE, 2);
    sizer_15->Add(switchAlt, 0, wxALL|wxFIXED_MINSIZE, 2);
    sizer_15->Add(switchCtrl, 0, wxALL|wxFIXED_MINSIZE, 2);
    sizer_15->Add(switchShift, 0, wxALL|wxFIXED_MINSIZE, 2);
    sizer_15->Add(label_15, 0, wxALL|wxFIXED_MINSIZE, 2);
    sizer_15->Add(switchKey, 0, wxALL|wxFIXED_MINSIZE, 2);
    sizer_15->Add(common_clear, 0, wxALL|wxFIXED_MINSIZE, 2);
    common_page_sizer->Add(sizer_15, 0, wxALL|wxEXPAND, 2);
    common_page->SetAutoLayout(true);
    common_page->SetSizer(common_page_sizer);
    common_page_sizer->Fit(common_page);
    common_page_sizer->SetSizeHints(common_page);
    sizer_16->Add(modList, 1, wxALL|wxEXPAND, 1);
    sizer_20->Add(modlistAlt, 0, wxALL|wxFIXED_MINSIZE, 2);
    sizer_20->Add(modlistShift, 0, wxALL|wxFIXED_MINSIZE, 2);
    sizer_20->Add(modlistCtrl, 0, wxALL|wxFIXED_MINSIZE, 2);
    sizer_20->Add(modlist_clear, 0, wxALL|wxFIXED_MINSIZE, 2);
    sizer_19->Add(sizer_20, 0, wxALL|wxEXPAND, 2);
    sizer_19->Add(label_8, 0, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 2);
    sizer_19->Add(modlistKey, 1, wxALL|wxALIGN_CENTER_VERTICAL|wxFIXED_MINSIZE, 2);
    sizer_17->Add(sizer_19, 0, wxALL|wxEXPAND, 2);
    sizer_17->Add(label_7, 1, wxALL|wxEXPAND, 4);
    sizer_17->Add(label_6, 0, wxALL|wxEXPAND, 4);
    sizer_16->Add(sizer_17, 0, 0, 2);
    module_list_page->SetAutoLayout(true);
    module_list_page->SetSizer(sizer_16);
    sizer_16->Fit(module_list_page);
    sizer_16->SetSizeHints(module_list_page);
    sizer_26->Add(label_9, 0, wxALL|wxFIXED_MINSIZE, 2);
    sizer_26->Add(phoneticKeyboardLayout, 0, wxALL|wxFIXED_MINSIZE, 2);
    sizer_22->Add(sizer_26, 1, wxEXPAND, 0);
    sizer_26_copy->Add(label_9_copy, 0, wxALL|wxFIXED_MINSIZE, 2);
    sizer_26_copy->Add(chewingKeyboardLayout, 0, wxALL|wxFIXED_MINSIZE, 2);
    sizer_22->Add(sizer_26_copy, 1, wxEXPAND, 0);
    sizer_27->Add(label_10, 0, wxALL|wxFIXED_MINSIZE, 2);
    sizer_27->Add(pojInputMode, 0, wxALL|wxFIXED_MINSIZE, 2);
    sizer_22->Add(sizer_27, 1, wxEXPAND, 0);
    sizer_28->Add(20, 0, 0, wxFIXED_MINSIZE, 0);
    sizer_28->Add(pojNoUnicode, 0, wxALL|wxFIXED_MINSIZE, 2);
    sizer_22->Add(sizer_28, 1, wxEXPAND, 0);
    sizer_29->Add(20, 0, 0, wxFIXED_MINSIZE, 0);
    sizer_29->Add(pojDirect, 0, wxALL|wxFIXED_MINSIZE, 2);
    sizer_22->Add(sizer_29, 1, wxEXPAND, 0);
    sizer_30->Add(label_11, 0, wxALL|wxFIXED_MINSIZE, 2);
    sizer_30->Add(tibetanIME, 0, wxALL|wxFIXED_MINSIZE, 2);
    sizer_22->Add(sizer_30, 1, wxEXPAND, 0);
    module_settings_sizer->Add(sizer_22, 1, wxALL|wxEXPAND, 2);
    sizer_31->Add(label_12, 0, wxALL|wxFIXED_MINSIZE, 2);
    sizer_31->Add(genericCombo, 0, wxALL|wxFIXED_MINSIZE, 2);
    sizer_24->Add(sizer_31, 0, wxEXPAND, 0);
    sizer_32->Add(label_13, 0, wxALL|wxFIXED_MINSIZE, 2);
    sizer_32->Add(genericMaxLength, 0, wxALL|wxFIXED_MINSIZE, 2);
    sizer_24->Add(sizer_32, 0, wxEXPAND, 0);
    sizer_24->Add(checkbox_10, 0, wxALL|wxFIXED_MINSIZE, 2);
    sizer_24->Add(checkbox_11, 0, wxALL|wxFIXED_MINSIZE, 2);
    sizer_24->Add(checkbox_12, 0, wxALL|wxFIXED_MINSIZE, 2);
    sizer_24->Add(genericBeepOnError, 0, wxALL|wxFIXED_MINSIZE, 2);
    sizer_23->Add(sizer_24, 1, wxALL|wxEXPAND, 2);
    sizer_33->Add(label_14, 0, wxALL|wxFIXED_MINSIZE, 2);
    sizer_33->Add(otherModCombo, 0, wxALL|wxFIXED_MINSIZE, 2);
    sizer_25->Add(sizer_33, 0, wxEXPAND, 0);
    sizer_25->Add(otherModList, 1, wxALL|wxEXPAND, 2);
    sizer_23->Add(sizer_25, 1, wxALL|wxEXPAND, 2);
    module_settings_sizer->Add(sizer_23, 1, wxEXPAND, 0);
    module_settings_page->SetAutoLayout(true);
    module_settings_page->SetSizer(module_settings_sizer);
    module_settings_sizer->Fit(module_settings_page);
    module_settings_sizer->SetSizeHints(module_settings_page);
    notebook->AddPage(common_page, _("Common"));
    notebook->AddPage(module_list_page, _("Modules List && Hotkeys"));
    notebook->AddPage(module_settings_page, _("Module Settings"));
    notebook->AddPage(output_filter_page, _("Output Filters"));
    top_sizer->Add(new wxNotebookSizer(notebook), 1, wxALL|wxEXPAND, 4);
    bottom_sizer->Add(ok_btn, 0, wxFIXED_MINSIZE, 0);
    bottom_sizer->Add(4, 0, 0, wxFIXED_MINSIZE, 0);
    bottom_sizer->Add(cancel_btn, 0, wxFIXED_MINSIZE, 2);
    top_sizer->Add(bottom_sizer, 0, wxALL|wxALIGN_RIGHT, 4);
    SetAutoLayout(true);
    SetSizer(top_sizer);
    top_sizer->Fit(this);
    top_sizer->SetSizeHints(this);
    Layout();
    // end wxGlade
}


void OVPrefDlg::OnFont(wxCommandEvent& evt)
{
	
}

void OVPrefDlg::OnBgColor(wxCommandEvent& evt)
{
	
}

void OVPrefDlg::OnBgPicture(wxCommandEvent& evt)
{
	
}

void OVPrefDlg::OnSoundTest(wxCommandEvent& evt)
{
	
}

void OVPrefDlg::OnCommonClear(wxCommandEvent& evt)
{
	
}

void OVPrefDlg::OnModListClear(wxCommandEvent& evt)
{
	
}


void OVPrefDlg::OnModListItemSelected(wxListEvent& evt)
{
}

