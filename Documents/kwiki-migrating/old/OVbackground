關於 OpenVanilla 計畫的背景，在 #osxchat blog 上的幾篇文章，我們有相當詳盡的說明。

== OpenVanilla：新的輸入法開發架構

* http://osxchat.blogspot.com/2004/10/openvanilla.html
* 10/24/2004
* 作者：zonble

lukhnos 在完成了香草輸入法 0.064 版之後，接下來所進行的工作，先是進行了CarbonInputMethod 計畫，CarbonInputMethod 計畫是目前的 OpenVanilla 最早的雛型。

CarbonInputMethod 的內容是重新整理蘋果發展者網站（Apple Developer Connection）所提供的輸入法設計範例—BIM（BasicInputMethod），原因是目前各種在 OS X 平台上可以看到的、開放源碼的輸入法如香草輸入法、SpaceChewing 酷音輸入法，以及日文輸入法 MacUIM 等等，都是使用 BIM 為基礎開發。而 BIM 的寫作本身有些混亂，且本身帶有許多 OS9 殘留的痕跡，多使用比較老舊的 API，但其實蘋果提供了許多新的 API 可以使用，lukhnos 的目標，首先是整理出一份精簡的、簡潔的、而且比較符合新的環境的輸入法設計範例。

在整理 CarbonInputMethod 到了一個程度之後，lukhnos 則在原有的基礎上，進行 OpenVanilla 計畫。 OpenVanilla 的目的是，成為一個輸入法核心與 OS X 連接的通用介面，包括可以動態載入 Dynamic Library（.dylib）檔案，將各種輸入法以 dylib 方式載入，以及所有輸入法的共通介面，如選字視窗、按鍵處理、資料的傳入與送出等等。

之後，程式設計者如果想要在 OS X 上開發輸入法，如果是透過 OpenVanilla 框架，就只要將輸入法核心寫成符合一定規範的 dylib 檔案即可。設計者不用將心力放在處理 OS X 的介面問題上，只需要專心在輸入法本身，也就是，在之前有許多個別的輸入法計畫，都必須自己處理許多 Carbon API 方面的問題，而 OpenVanilla 就是負責將 Carbon API 的問題處理完成，並且將這些之前的計畫，納入在一個簡單的框架之下。

比方說，未來在 OS X 上的酷音輸入法，也不用成為獨立的分支，而可以將「新酷音」（Qooing）計畫中，抽離原本酷音輸入而獨立的 libchewing，直接應用在 OS X 平台上，而不用像之前 SpaceChewing 計畫那樣，在 0.6 到 0.7 版之間，處理那麼多 Carbon API 方面的問題（當然，那時候的常識，也累積了現在的許多經驗，以及對於OS X 程式設計環境的熟悉）。可以讓 SpaceChewing 與新酷音共同維護一個輸入法核心即可，避免過去開發人力分散的狀況，一個下午的時光內，gugod 就已經順利的將 OpenVanilla 與 libchewing 連接成功了。

在使用者介面方面，OpenVanilla 會是在 OS X 系統偏好設定當中的一種輸入法。如果您想要從  OS X 的 component  bundle 層次撰寫輸入法模組的話，那麼， CarbonInputMethod 也可以給您相當大的幫助。
在此之前，#osxchat 頻道的朋友曾經發起一個類似的計畫：XCINIX，企圖將 XCIN 改寫成 OS X 的 component，將 XCIN 計劃下的各種輸入法移植到 OS X 平台上，OpenVanilla 也是在做一件類似的事情，不過，採取的是比較不一樣的方法。而現在看起來，OpenVanilla 所採用的方式，似乎更好。

=== OpenVanilla 插曲

* http://osxchat.blogspot.com/2004/11/openvanilla.html
* 11/15/2004
* 作者：lukhnos

嗯，其實對我來說，繼續開發 OpenVanilla ，完成大易模組只是目的之一。

最初在釋出「香草注音」和「香草倉頡」後，Autrijus 問我：那大易有沒有可能做？我知道他是重度大易使用者，同樣也用三鍵，但是他喜歡用 '[] 等選字鍵，他自己在 FreeBSD 上的 dayi3.cin 也是配合自己需要 patch 過的。

如果當時照「香草倉頡」的模式，弄一套大易輸入法的模組，然後很努力地（意思是不管會把源碼搞得多亂）再多塞一個輸入法到香草裡，技術上絕對是做得到的。

但是這樣做就太不漂亮了。

本來，我就一直想找時間，把 Apple 的 BasicInputMethod/Textservice 弄熟一點，然後「香草」到了 0.06 版時，已經有某一個單一模組，長成了 1311 行的大怪物（ vanillaeventhandler.cpp ）。這樣的 code 要人閱讀，簡直是不可能的。

我是這樣覺得，所謂 opensource，就是程式要有自己的生命。每個人可以從程式碼中改出自己想要的功能，甚至另起爐灶玩一局新的。我自己是這個模式的受益者，如果沒有「酷音」的公開源碼、XCIN 的開放資料、Apple 的不要錢的 Xcode 跟 BasicInputMethod ，我根本不可能解決我的「特殊」需要（使用倚天排列的傳統注音輸入法）。那麼，我說不定老早就把花了很多錢買來的 PowerBook 賣掉了。

既然要做新版，就應該從已經學到的經驗出發，重新設計一套新的架構。理想上，是希望能設計出一套簡單、清楚，可以讓更多人參與的框架。OpenVanilla 就是這樣，和 b6s、gugod、autrijus 經過許多討論，漸漸形成的架構。然後某一天，和gugod、zonble 碰頭，一邊聊天一邊寫 code，突然發現 OpenVanilla 的幾個重要模組，差不多已經完成了。我在想，「好吧，那來寫個輸入法模組測試一下，看看這個架構是不是真的可行。」寫什麼輸入法模組好呢？我第一個想到的，當然還是 Autrijus 的需要。

（另外一方面，gugod 也動作超快，同時開始了「酷音」核心程式庫的 C++ 化工作，「 OV 酷音」幾乎與「OV 大易」同時推出測試版本，這也都強化了我們對 OV 架構的信心。）

但是就像我說的，這個因為偷懶而用了 Cocoa/Objective-C++、在晚上一邊喝茶一邊寫出來的「大易模組」，其實是個泛用的 xcin.cin 解譯器。我們試過了倉頡、行列（當然還有某個很重要的輸入法），發現功能上大致齊備──當然，套用 gugod 的說法「90% 的 code 寫完時，表示還有 90% 的工作待完成」。但這的確證實了 OpenVanilla 的架構是可行的，也開始實現了最早設計 OV 的初衷：讓寫輸入法的人能輕鬆撰寫輸入法模組，而完全不用在乎 OSX（或任何作業系統、UI）相關的細節。簡單、清楚、無平台相依性、只要有基礎的 C++ 能力就可以參與──這一直是我希望做到的。雖然在實作上一定會有要克服的地方，而任何架構一旦長大，元件數量也會迅速擴張，但這個 bottomline 是我一直希望堅持住的。

當然，自己生的孩子，怎麼看都順眼。然而輸入法畢竟是大家每天要用的東西，輸入法使用者的切身經驗才是最重要的。我從觀察「酷音」的修訂歷程，以及我自己自「香草倉頡」推出後所陸續接到的回應，才發現原來還有那麼多細節是我沒注要的地方，那麼多不同的使用經驗和需求。

而這其實也是我蠻希望 OpenVanilla 能早日成熟，並且有完整的文件說明的原因：我覺得，像輸入法這麼個人化、這麼切身的東西，還是應該要能提出一套開放、易於自訂、易於修改、易於「量身訂作」的架構，好讓「輸入法」能配合使用者的需要，而不是讓使用者配合「輸入法」來改變習慣。

所以，「大易模組」測試版的釋出只是開始的開始。後面還有很多很多細節的工作要做，要追上。能夠真的做到什麼，我還不知道。但過程當中學到很多東西，是貨真價實的。而且，跟大家一起工作、討論、搞笑、吐苦水的感覺也挺好。

繼續努力。

.infoblock
{include: OVManualIndex}
.infoblock
