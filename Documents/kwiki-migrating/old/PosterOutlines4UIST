最後送出的版本是 http://openvanilla.org/plugin/attachments/PosterOutlines4UIST/UIST.ppt


= Reintroducing Input Methods - A Non-Intrusive Plug-In Framework of Text Services =

Tian-Jian Jiang, Deng Liu, Wei-Zhong Yang, Meng-Juei Hsieh, Kang-Min Liu, Pek-Tiong Tan, Zhong-Hsiang Chang, Wen-Lien Hsu

June, 26, 2005.

== Introduction ==

* What is "input method"?
** Originally an Asian language-specific (esp. CJKV) text entry problem
* Why Input Method Can Be Useful to You
** Keyboard is still indispensable after all these decades
** Input method is "non-intrusive" plug-in service plus application add-on

== Human Factor, Usability and UI Design Issues ==
=== Keyboard Layout ===
* U.S 101-key keyboard v.s. localized keyboards, mobile device 12-key keyboard, and Dasher
* Advantages over "dead-key" combinations (for entering accented characters)

=== Text Service ===
* Spelling Checker of (e.g.) MS Word is useful, but it works only within Word
* Make a built-in spelling checker into an input method--it checks as you type!

=== Candidate List ===
* Comparison with auto-complete and contextual menus
** IntelliSense
** QuickSilver
* Context menu /is/ candidate list (for example, we use input method as a shell command or programming language API auto-completion tool)

== How Input Method Works ==
* OS/desktop environment level: low-level API, upon which developers have to build IM from scratch.
** Windows: Text Service Framework and IME API
** Mac OS X: Apple Text Service Manager
** X-Window: XIM
* IM framework Level
** OpenVanilla/IIIMF/SCIM/UIM
** Dynamic-loaded ("library-based") vs. client-server architecture
** UI implementation (esp. for "candidate List" and keystroke events)
* Input method is also "output method" !


== Introducing OpenVanilla ==

"Simplify, simplify, simplify!" -- Henry David Thoreau (1817-1862)

* What OpenVanilla Is:
** It is a loose set of Loaders and Modules--but both are tied with the simple and unifed set of interface
** It defines a thin set of simple header files
** It offers a unified interface to every key-event handler
** It uses UTF-8 throughout the code base

* What OpenVanilla is /not/ :
** It is not grandiose in design (avoiding the over-design syndrome)
** It does not try to be a jack-of-all-trade framework
** It does not claim to solve all IM problems (e.g. handwriting pad, voice input, etc.)--it aims to solve 95% of the IM problems /elegantly/ and is happy with what it can do
** It does not claim to be "cross-platform" without real implementation
** It does not require complicated protocol or deep dependency tree
** It does not care the implementation detail of respective Loader/modules, although it encourages platform-independency under the UNIX tradition (lowest dependency, high fault tolerance, "just work" and "Do What I Say" philosophy, minimum configuration with well-defined default behavior)

* What OpenVanilla does not do:
** No mouse event (would result in 90% code doing 1% of rarely used features)
** No fancy candidate window control (would result in platform-dependency)
** No complicated configure widget design (would require dependency on certain GUI library e.g. gtk).

* Features of OpenVanilla
** Implements popular Traditional and Simplified Chinese IMs
** Exchangable .cin Format and "generic" IM module
** SQLite-based modules in development
** OpenVanilla-UIM bridge that supports Japanese IM
** SCIM-OpenVanilla bridge that enables OV to work on X Window
** Display Server design
** Experimental Socket-Based Input Method Mechanism


== Customization, Simulation and Personalization ==
* Customize by .cin files or SQLite databases
** The easiest way to customize your own plugin
** Help constructing simulatioins of mobile device input method
* Cache Management Pattern


== Showcases ==
* Popular Chinese and Tibetan Input Methods
** Support Japanese via OpenVanilla-UIM
** Support Simplified Chinese Pinyin via SCIM-OpenVanilla
* POJ/Latin-Script Input Methods
* Unicode Symbol/Artificial Language Input Methods
** Unicode symbol input method can also support African characters.
* Output Filters
** zh_TW <-> zh_CN
** Morse Code
* Simple Interpreters
** BASIC
** PHP
* Dictionary/Thesaurus Services
** WordNet


== Conclusion and Future Works ==
* IM Serves Not Only Asian Languages
* Text Service Framework Is Not Just "Input Method"
* Potentials for More Creative Uses
* Supporting MS Windows
* More NLP (Natural Language Processing) Abilities
