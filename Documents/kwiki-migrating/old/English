= Introducing OpenVanilla =

OpenVanilla is an open source input method (IM) framework that aims to offer users a better IM experience. It has been first designed for Mac OS X, integrating five major IM modules (Chewing, Phonetics, Cangjei, Dayi and Array), of which Apple's built-in counterparts are not satisfactory for many Traditional Chinese users. Because of its simplicity and extensibility, there are already more than 20 different IMs available, making its latest stable release (0.6.3) an alternative to Apple's Chinese input methods for people in Taiwan, Hong Kong and China. OpenVanilla is not just designed for the Traditional Chinese language, a Tibetan IM, a Taiwanese Holo/Hakka IM and a Unicode symbol IM together show the potential of this framework.

OpenVanilla is divided into two major components: Loader and modules. A Loader is a platform-depedent program that loads modules onto a specific desktop environment. Currently we have developed the Loader for Mac OS X. The modules are the name of the game. It is very easy to write an input method using OpenVanilla's framework. A working knowledge of C and some basic understanding of C++ are all one needs. We are also developing solutions for writing modules in other languages, such as Perl. In addition to input method, a new category of modules, called "output filters" (OF), is added in OpenVanilla since 0.7.0 (installable technical preview coming soon). An output filter transforms what the user has just typed, and different OF's can work in a layered fashion. For example, one can have a filter that coverts Traditional Chinese characters into Japanese Kanji, and then have another filter that converts Chinese phrases into Japanese equivalents! The possibilities are there to be explored.

Although right now OpenVanilla has only one Loader for Mac OS X, it should be noted that its currently available IM modules are highly portable. Most of them recompile under Linux/FreeBSD/Windows without no hassle or requiring only minimal modification on the header files. The IM modules can serve as command-line IMs and can be ported to other IM frameworks (such as SCIM). This is a direction that we find intesting to pursue, although so far we haven't got the time to dive into it. People interested in the different aspects of IM/OF development are therefore very welcome!
