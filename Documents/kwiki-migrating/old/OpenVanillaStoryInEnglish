Well, it all began with the idea of "scratching your own itch" (d'apr√®s Eric S. Raymond), an itch that lasted for more than 17 years.

Apple was kind of slow in terms of localizing its operating system. In 1987, three years after Apple launched its Macintosh, did the company come up with a Chinese version of its Finder (then the improper name of its later renamed "Mac OS"), Chinese Talk. There were several competing alternatives, but they came and went.

So Apple's Chinese Talk and later its Chinese version of Mac OS has stayed--with one VERY SERIOUS LACK. Its various versions do have offered several Chinese input methods. But one of them--the Phonetic method--never (up to this day) comes with a keyboard layout called Eten Layout, which is closer to the Chinese phonetics.

Many people who started using computers then in the mid-80s learned Eten Layout as their first (and often only) way of getting Chinese characters on their screen. Many of them shyed away from Macintosh because of this lack. Apple must have lost countless PC switchers because of this, well, I would say, negligence. Microsoft scored one for its prompt response to Taiwan's local needs. The Phonetic method in Windows always comes with Eten Layout, along with several other layouts.

Apple's Mac OS X, launched in 2002, didn't fare any better. Worse. Another popular input method, Cangjei, got screwed up this time. Many users complained OS X messed up with what they've been used to in OS 9. Too bad.

In 2003, clkao (Chia-liang Kao)'s ported Chewing, a very popular Chinese input method in Linux/FreeBSD world, to OS X. Thanks to Xcode, a development tool that comes with OS X gratis, it's now possible to carve input methods of one's own on OS X. Viva l'open source. clkao's port is called ChewingOSX and is handed to gugod (Kang-ming Liu) and zonble (Weizhong Yang) in 2004 for further maintenance.

clkao, gugod and zonble's success has inspired lukhnos to scratch his itch, i.e. he needs a Phonetic input method that supports Eten Layout. Hence the birth VanillaInput in July 2004. A month later, Cangjei support was also added, mending the loss and pain that OS X has caused to many OS 9 users.

But the repurcussions of Chewing and VanillaInput do not stop here. People are now asking if it is possible to design new Chinese input methods. Before it was almost impossible. It was mostly up to OS maker's hubris (and they don't care that much for "marginal" needs, such as IM for minority languages). Also, in terms of writing an IM, there are still way many parts (libraries, for example) that are still not "open" source.

In October 2004, lukhnos, gugod, zonble and b6s begin to come up with a new IM framework, OpenVanilla. It's designed on Mac OS X, but the team is working beyond OS X. It intends to be a minimalist and clean design. Its goal: to help people write their own IM. With minimal C++ knowledge. *Sans* platform-dependent worries.

The pictures you see here make an example of how OpenVanilla helps filling the input method gap. Holo is a language spoken by more than 60% of people in Taiwan. It is the de facto majority language (even though 95% of the people speak and read Mandarin, the official language, to varying competence and extent), but it never has the same standing as Mandarin. One of the reasons is that it is never used in information processing, i.e. on your computer. And one of the reasons it never gets on screen is that there is never a proper, fully-functioning input method for it.

POJ, or peh-oe-ji, is the de facto Romanization standard for the Holo langauge spoken in Taiwan. It's a Romanization with a history of over 150 years, and is used to publish a Holo Bible and many other important texts. The OpenVanillaStory is just at its beginning. Currently a preliminary implementation is done using rapid prototyping techniques and Objective-C++. To make it platform-independent and more accomodating, it needs to re-implemented. Tons of things to be done. But the idea is there. Save the Objective-C part that is mostly data structure things, OpenVanilla's POJ IM module is a pure algorithm code that deals exclusively with keyboard mapping and syllable transformation. No user interface code there. There is no reason why an IM developer on earth would need to know that.

OpenVanilla Project: http://www.openvanilla.org

[http://cmt.phys.nthu.edu.tw/~pcchen/POJ/POJDemo2.mov Demo movie]

This screenshot demonstrates the different "layers" of a functional POJ input method. Holo can be written in either Romanized form (peh-oe-ji) or in Chinese/Han characters. In a way Holo is like Japanese: the written language can
be represented in various ways (in syllabic forms or in ideographic forms). A better Holo input method should evolve
further into the "phrase" layer, in which phrases can be automatically picked up or that users do not need to explicitly assign tones for each syllable.

http://cmt.phys.nthu.edu.tw/~pcchen/POJ/p1.png
