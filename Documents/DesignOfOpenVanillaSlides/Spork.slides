----
presentation_topic: Design of OpenVanilla
presentation_title: OpenVanilla 的設計構想與現況
presentation_place: OpenStudio, Taipei
presentation_date: February 19, 2005
----
{image: http://openvanilla.org/~lukhnos/images/vanilla.jpg}
== OpenVanilla 的演進史
* 原先是為了解決 Mac OS X 上沒有「倚天排列」的傳統注音輸入法而發展
+* 從 Apple 的 BasicInputMethod 修改而來
+* 後來加入了倉頡輸入法，開始受到重視
+** 之後便開始收到「能不能加入○○輸入法」的詢問
+** 一直硬把單一輸入法表格塞進靜態連結的輸入法模組中是不行的
+** 於是開始思考一個共通輸入法框架的可能性
+* 2004 年 9 月開始 OpenVanilla 的框架設計
+** 設計重點在於：程式庫介面如何架構、編碼問題、動態載入
+* 2004 年 10 月出現第一個版本 (version 0.01 "hell")
+* 2004 年 12 月進入 0.6 版，完整的架構已經有了初步樣貌
+* 2005 年 1 月推出第一個 stable 版本 0.6.3
----
{image: http://openvanilla.org/~lukhnos/images/openvanilla-logo.jpg}
== OpenVanilla 希望解決的問題
+* 提供一個極簡單的框架 (framework)，讓開發者用最少努力，便能開發出新的輸入法模組
+* 開發出的輸入法模組，不需依賴作業系統或特定程式庫
+** 輸入法本來就應該只是個純演算法（後面詳述）
+** 例如使用 minimal C 或 C++ 開發
+** 輸入法的程式碼要易於供人理解、修改
+== 解決問題的途徑
+* 以最快解決 OS X 上的輸入法問題（移植越多輸入法越好）為優先
+* 儘早釋出 (release early)，讓實際使用者快速提供 feedback
+** 例如：大易、行列以完全做到跟 Windows 版本一樣（甚至更好）為目標
+** 意外：因此帶出了資料表格欠維護的問題
+* 初期不考慮 client/server 架構、多人使用、資料庫 backend
+* 單純的鍵盤輸入法（不考慮語音、手寫）
+* Simplify, simplify, simplify
----
{image: http://images.apple.com/macosx/images/pantherbox_20040701.jpg}
== 大前提：在 Mac OS X 上開發輸入法的條件與限制
+* OS X 本身有完整的 Unicode 及自家特殊的 locale 支援
+** 因此 Unicode/locale 處理的問題不存在
+** 轉碼機制已經內建於系統之中，因此不需要 iconv
+* OS X 繼承了原先舊有 Mac OS 的輸入法架構，還算簡單清楚
+** 每一個 app 都會建立一個 TextService component instance
+*** 原來 OS 9 時代是一個 component instance 服務大家
+*** 每一個 app 的視窗都會再建立一個 TextService session
+** 雖然仍然有很多問題，但是還算可以接受
+*** 呃... 其實已經到了要爆炸的程度了
{image: http://www.pomperaug.com/socstud/stumuseum/web/mushcloud.jpg}
----
{image: http://openvanilla.org/~lukhnos/images/statemachine.jpg}
== 什麼是輸入法？OpenVanilla 怎麼看待輸入法？
+* 由字鍵序列 (key sequence) 產生的組字結果 (composed result)
+** 例如：hda (竹木日) -> 香
+* 在現代的 GUI 環境下，同時還需時時改變組字區 (pre-edit/composing buffer)
+* 對於需選字的輸入法，還需要控制選字窗的顯示
+** 例如 Xcin 的隨打隨組字 (auto composing) 功能
+* 因此，輸入法是一種有限狀態機
+** 也可以用 event-driven model 來看待
+** 接受使用者輸入事件，對組字區和選字窗產生輸出
+** 根據這個原則，OV 把輸入法視為「與外界做有限接口」的黑盒子
+** OV 設計一個限定範圍的抽象界面，將事件輸入和兩種輸出，提供給輸入法
----
{image: http://openvanilla.org/~lukhnos/images/openvanilla_h.jpg}
== OpenVanilla 的設計
* 嚴格說來，只有一個檔案：OpenVanilla.h
+** (hey, that's what "framework" means!)
+* OpenVanilla.h 定義數個抽象的 C++ class/interface:
+** OVInputMethod (輸入法模組)
** OVInputMethodContext (輸入法資料)
** OVKeyCode (使用者輸入的鍵碼)
** OVBuffer (組字緩衝區)
** OVTextBar (選字窗)
** OVService (系統服務)
** OVDictionary (組態資料)
+** Introducing: OVOutputFilter (coming up in OV 0.7)
----
== 就這樣？
+* 是的，OpenVanilla 就是這些元件組成的
+* 當然，怎麼實作 (implement) 這些元件，那是另一回事...
+* 不過，OpenVanilla 確實一直堅持守住簡單設計的原則
----
{image: http://openvanilla.org/~lukhnos/images/ovloader.jpg}
== OpenVanilla 的輸入法模組
+* 核心函式只有一個: OVInputMethod::keyEvent()
+* 接收四個參數:
** OVKeyCode *key: 使用者輸入的鍵碼
** OVBuffer *buf: 組字區物件
** OVTextBar *textbar: 選字窗物件
** OVService *srv: 系統提供的一些額外服務（例如發出警示鈴聲、轉碼等等)
+* 以上四個物件全部由輸入法載入器 (Loader) 提供
----
{image: http://openvanilla.org/~lukhnos/images/ovloader2.jpg}
== OpenVanilla Loader
+* 負責與作業系統及 GUI 桌面環境接口 (bridging)
+* 將應用程式所送來的輸入法事件，轉換成 OVKeyCode
+* 同時與 GUI 桌面環境的輸入法組字區接口，提供 OVBuffer
+* 另外建立視窗，供做選字窗 OVTextBar 所用
+* 動態載入輸入法模組，供使用者選用
+* 把 configuration information 傳給輸入法模組
+* 簡言之，OpenVanilla 是個 loader 要做很多事的架構
----
== 目前實作的狀況
{image: http://photos1.flickr.com/2501144_47694af3ce_d.jpg}
+* OpenVanilla Loader 0.6.3 for OS X 已經完整而穩定
** 彩色選字窗
** 簡繁互轉
+* 酷音輸入法 for OpenVanilla
+* 自製的輸入法模組：
+** 注音輸入法
+** 倉頡輸入法
+** "Xcin" 輸入法（使用 .cin 表格，功能模擬 Xcin 框架的模組）
*** 直接讀取 .cin 檔，不透過中間 .tab 檔案
*** 因此所有 .cin 格式的輸入法都可以進入 OpenVanilla
*** 目前最大的 .cin 檔：輕鬆輸入法 (4.8M, 40萬詞條)
+** 行列輸入法（因為太多潛規則，故從 Xcin 模組分離）
+** 閩語／客語白話字輸入法（同樣使用 .cin 表格，但鍵碼處理複雜）
+** 藏文輸入法
+** 還有一些奇奇怪怪的
*** 克林貢文
*** KK音標（因為 KK 音標是「台灣奇蹟」）
*** OVIMezbasic (?)
*** OVIMPHP (!)
*** OVIMSocket/Perl (@#$%*)
----
== 輸入法做為一種實驗
----
{image: http://openvanilla.org/~lukhnos/images/outputfilter.jpg}
== OutputFilter (cf. "Input" Method)
+* 輸出結果經過 filter 處理再正式輸出
+* 目前 OV 0.6.3 的簡繁轉換，以及全形半形模式就是這樣做的
+* 預計於 OV 0.7 以後也成為可外掛模組
+* 一些惡趣味的實驗就此出現：
+** 可不可以用輸入法來做四則運算？（輸入 + 10 20 ENTER -> 30 ？）
+** 可不可以用輸入法來寫程式？（OVIMezbasic 和 OVIMPHP 展示了這種可能）
+** 可不可以用來進行即時詞庫修正/submission？
+** ... and more
----
{image: http://openvanilla.org/~lukhnos/images/sqlite3.jpg}
== 其他可能的方向
+* 使用 SQLite 做為資料庫後端
+* Socket IM/OF
+* 多層 IM/OF （可做到抽換式的符號輸入模組，多種輸出選擇等等）
+* 更華麗的選字窗
+* 更華麗的設定界面
+* 與 SCIM 接口
+* 移植到其他平台上
+* ... 許多想像空間
----
== 回歸簡單的設計原則
* Because less is often more.
----
banner_bgcolor: lightblue
----
== Thank you / merci / danke / 誠に有難う
* OpenVanilla Team:
** lukhnos (OpenVanilla.h, OVLoader, OVIM's)
** gugod (building environment, OVLoader, OVIMChewing)
** zonble (art, OVIMTibetan)
** b6s (OVIMXcin)
** mjhsieh (documentation)
** pektiong (OVIMPOJ)
* And many thanks to all those who support and contribute to the OpenVanilla Project.
